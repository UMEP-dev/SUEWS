#!/usr/bin/env python3

import subprocess
import re


def get_version_from_git():
    try:
        # Get the most recent tag and the number of commits since that tag
        # Only match version tags (starting with digits)
        describe_output = (
            subprocess.check_output([
                "git",
                "describe",
                "--tags",
                "--long",
                "--match=[0-9]*",
            ])
            .strip()
            .decode("utf-8")
        )

        # Match against the pattern including optional 'dev' part
        match = re.match(
            r"^(v?\d+\.\d+\.\d+(?:\.\w+)?)-(\d+)-g([0-9a-f]+)$", describe_output
        )
        # print(match.groups())

        if match:
            base_version = match.group(1)
            distance = int(match.group(2))
            commit_hash = match.group(3)

            # Clean up version to be valid Python packaging version
            if base_version.startswith("v"):
                base_version = base_version[1:]

            # Keep .dev suffix if it's part of the tag (intentional development release)
            # Only add .devN suffix if there are commits after the tag
            has_dev_suffix = ".dev" in base_version

            if distance == 0:
                # Keep the tag as-is (including .dev if present)
                version = base_version
            else:
                # If tag already has .dev, append the commit count
                # Otherwise add .dev with commit count
                if has_dev_suffix:
                    version = f"{base_version}{distance}"
                else:
                    version = f"{base_version}.dev{distance}"
        else:
            raise ValueError(
                f"Output '{describe_output}' does not match the expected pattern."
            )

        return version

    except subprocess.CalledProcessError:
        raise RuntimeError(
            "Git command failed. Make sure you're running this script in a Git repository."
        )
    except Exception as e:
        raise RuntimeError(
            f"An error occurred while retrieving the version from Git: {e}"
        )


def write_version_file(version_str):
    version_file = "src/supy/_version_scm.py"
    version_tuple = parse_version_tuple(version_str)

    content = f"""# file generated by `get_ver_git.py`
# don't change, don't track in version control
__version__ = version = '{version_str}'
__version_tuple__ = version_tuple = {version_tuple}
"""

    with open(version_file, "w") as file:
        file.write(content)

    # print(f"Generated {version_file} with version {version_str}")


def get_commit_info():
    """Get both short and full commit hashes."""
    try:
        commit_short = (
            subprocess.check_output(
                ["git", "rev-parse", "--short=7", "HEAD"], stderr=subprocess.DEVNULL
            )
            .decode("utf-8")
            .strip()
        )

        commit_full = (
            subprocess.check_output(
                ["git", "rev-parse", "HEAD"], stderr=subprocess.DEVNULL
            )
            .decode("utf-8")
            .strip()
        )

        return commit_short, commit_full
    except:
        return "unknown", "unknown"


def parse_version_tuple(version_str):
    parts = version_str.split(".")
    major, minor, patch = map(int, parts[:3])
    if "dev" in parts[-1]:
        dev_part = parts[-1]
    else:
        dev_part = None

    if dev_part:
        return (major, minor, patch, dev_part)
    else:
        return (major, minor, patch)


if __name__ == "__main__":
    version_str = get_version_from_git()
    write_version_file(version_str)
    print(get_version_from_git())
