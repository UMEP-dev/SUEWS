name: Build and Publish Python wheels to PyPI and TestPyPI

# Prevent concurrent builds on the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    paths: # Push events containing matching files
      - "src/suews/**"
      - "src/supy/**"
      - "src/supy_driver/**"
      - ".github/workflows/build-publish_to_pypi.yml"
      - "test/**"
      - "pyproject.toml"
      - "meson.build"

  pull_request:
    paths: # PR events containing matching files
      - "src/suews/**"
      - "src/supy/**"
      - "src/supy_driver/**"
      - ".github/workflows/build-publish_to_pypi.yml"
      - "test/**"
      - "pyproject.toml"
      - "meson.build"
jobs:
  build_wheels:
    name: Build wheel for ${{ matrix.python }}-${{ matrix.buildplat[1] }} ${{ matrix.buildplat[2] }}
    runs-on: ${{ matrix.buildplat[0] }}
    permissions:
      contents: read
      pull-requests: read  # Required for Claude Code
      issues: write        # Required for creating transparency issues
      actions: read        # Required for Claude Code to read CI results
      id-token: write      # Required for Claude Code authentication
    strategy:
      matrix:
        buildplat:
            - [ubuntu-latest, manylinux, x86_64]
            - [macos-13, macosx, x86_64]
            - [macos-latest, macosx, arm64]
            - [windows-latest, win, AMD64]

        python: ["cp39", "cp310", "cp311", "cp312", "cp313"]
        # exclude:
        # - buildplat: [macos-latest, macosx, arm64]
        #   python: ["cp38", "cp39"]

      fail-fast: false
    env:
      IS_32_BIT: ${{ matrix.buildplat[2] == 'x86' }}
      WHEEL_NAME: ${{ matrix.python }}-${{ matrix.buildplat[1] }}-${{ matrix.buildplat[2] }}
      CIBW_BUILD: ${{ matrix.python }}-${{ matrix.buildplat[1] }}*
      CIBW_ARCHS: ${{ matrix.buildplat[2] }}
      CIBW_ENVIRONMENT_PASS_LINUX: RUNNER_OS
      CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_28
      CIBW_MANYLINUX_AARCH64_IMAGE: manylinux_2_28
      CIBW_BEFORE_ALL_MACOS: >
        brew install gfortran &&
        brew unlink gfortran &&
        brew link gfortran
      CIBW_BEFORE_ALL_WINDOWS: >
        C:\msys64\usr\bin\bash.exe -lc "pacman -Syu --noconfirm" &&
        C:\msys64\usr\bin\bash.exe -lc "pacman -S --needed --noconfirm mingw-w64-ucrt-x86_64-gcc mingw-w64-ucrt-x86_64-gcc-fortran mingw-w64-ucrt-x86_64-binutils mingw-w64-ucrt-x86_64-make mingw-w64-ucrt-x86_64-openblas"
      CIBW_ENVIRONMENT_WINDOWS: >
        PATH="C:\\msys64\\ucrt64\\bin;$PATH"
        CC=gcc
        CXX=g++
        FC=gfortran
        CFLAGS="-D__USE_MINGW_ANSI_STDIO=1 -mlong-double-64"
        CXXFLAGS="-D__USE_MINGW_ANSI_STDIO=1 -mlong-double-64"
        FCFLAGS="-fno-optimize-sibling-calls"
        LDFLAGS="-lucrt -static-libgcc -static-libgfortran -LC:/msys64/ucrt64/lib -lsetjmp_compat"
      CIBW_BEFORE_BUILD_WINDOWS: >
        echo Creating setjmp compatibility library... &&
        echo int _setjmpex(void* buf) { extern int __intrinsic_setjmpex(void*); return __intrinsic_setjmpex(buf); } > setjmp_compat.c &&
        C:\msys64\ucrt64\bin\gcc.exe -c setjmp_compat.c -o setjmp_compat.o &&
        C:\msys64\ucrt64\bin\ar.exe rcs libsetjmp_compat.a setjmp_compat.o &&
        echo Library created, checking contents: &&
        C:\msys64\ucrt64\bin\nm.exe libsetjmp_compat.a &&
        echo Copying to standard locations: &&
        copy libsetjmp_compat.a C:\msys64\ucrt64\lib\ &&
        copy libsetjmp_compat.a C:\msys64\ucrt64\x86_64-w64-mingw32\lib\ &&
        echo Verifying library locations: &&
        dir C:\msys64\ucrt64\lib\libsetjmp_compat.a &&
        dir C:\msys64\ucrt64\x86_64-w64-mingw32\lib\libsetjmp_compat.a &&
        where python &&
        where gcc &&
        gcc --version &&
        pip install delvewheel
      CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: "delvewheel repair -w {dest_dir} {wheel}"
      CIBW_TEST_REQUIRES: pytest
      CIBW_TEST_COMMAND_MACOS: "python -m pytest '{project}/test'"
      CIBW_TEST_COMMAND_LINUX: "python -m pytest '{project}/test'"
      CIBW_TEST_COMMAND_WINDOWS: "python -m pytest {project}\\test"
      # CIBW_TEST_SKIP: "cp310-macosx_arm64" # skip test on arm64 on python 3.10 - cannot pass the water balance test for unknown reason even though it should be the same as x86_64
      MACOSX_DEPLOYMENT_TARGET: ${{ matrix.buildplat[0] == 'macos-13' && '13.0' || '14.0' }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
            python-version: 3.12

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.22.0

      - name: Check user authorization for Claude Code
        if: failure()
        id: auth-check
        uses: actions/github-script@v7
        with:
          script: |
            const authorizedUsers = process.env.CLAUDE_AUTHORIZED_USERS;
            const currentUser = context.actor;
            
            // Check if Claude Code is available and user is authorized
            if (!authorizedUsers) {
              console.log('CLAUDE_AUTHORIZED_USERS secret not configured - skipping Claude Code');
              core.setOutput('authorized', 'false');
              return;
            }
            
            // Check if user is in the authorized list (supports both comma and newline separated)
            const usersList = authorizedUsers.split(/[,\n]/).map(u => u.trim()).filter(u => u);
            
            if (usersList.includes(currentUser)) {
              console.log(`✓ User ${currentUser} is authorized for Claude Code`);
              core.setOutput('authorized', 'true');
            } else {
              console.log(`User ${currentUser} is not authorized for Claude Code`);
              core.setOutput('authorized', 'false');
            }
        env:
          CLAUDE_AUTHORIZED_USERS: ${{ secrets.CLAUDE_AUTHORIZED_USERS }}

      - name: Claude Code automatic build failure fix
        if: failure() && steps.auth-check.outputs.authorized == 'true'
        id: claude-fix
        uses: anthropics/claude-code-base-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          model: claude-sonnet-4-20250514
          prompt: |
            🚨 **Automated Build Failure - Please Fix**

            **Build Details:**
            - Platform: ${{ matrix.buildplat[0] }}
            - Python: ${{ matrix.python }}
            - Architecture: ${{ matrix.buildplat[2] }}
            - Workflow: ${{ github.workflow }}
            - Run ID: ${{ github.run_id }}

            **Failure Context:**
            - Branch: ${{ github.ref_name }}
            - Commit: ${{ github.sha }}
            - Actor: ${{ github.actor }}

            The build failed during the wheel building process using cibuildwheel. Please:

            1. **Analyze the build failure logs** from this GitHub Actions run
            2. **Identify the root cause** of the wheel building failure
            3. **Provide a fix** with specific code changes
            4. **If this is a transient issue**, suggest retry strategies
            5. **If unable to fix automatically**, document the issue clearly

            **Focus areas:**
            - Compilation errors (C/C++/Fortran)
            - Dependency issues
            - Platform-specific problems
            - Build configuration issues
            - Environment setup problems

            **This is an automated request** - please provide a direct fix or create an issue if manual intervention is needed.

            ---
            **Custom instructions for build failure context:**

            You are analyzing a build failure in the SUEWS project. This is a Fortran/Python urban climate model.

            Key build information:
            - Build system: meson-python with cibuildwheel
            - Languages: Fortran (f95), Python
            - Testing: pytest
            - Common issues: Fortran compilation, dependency conflicts, platform-specific problems

            When fixing build failures:
            1. Check build logs for specific error messages
            2. Look for compilation errors in Fortran code
            3. Check dependency versions and conflicts
            4. Verify platform-specific build requirements
            5. Test fixes thoroughly before committing
          allowed_tools: |
            Bash(make dev),
            Bash(make test),
            Bash(make clean),
            Bash(python -m pytest test/* -v),
            Bash(git status),
            Bash(git diff),
            Bash(git log --oneline -10),
            Read,Write,Edit,MultiEdit,
            Grep,Glob,LS,
            TodoRead,TodoWrite

      - name: Create transparency issue for Claude Code fix
        if: failure() && steps.auth-check.outputs.authorized == 'true' && steps.claude-fix.conclusion == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            const commitSha = '${{ github.sha }}';
            const runId = '${{ github.run_id }}';
            const platform = '${{ matrix.buildplat[0] }}';
            const python = '${{ matrix.python }}';
            const arch = '${{ matrix.buildplat[2] }}';

            // Create platform-specific title by default
            const platformTitle = `✅ Claude Code Fix: Build failure resolved - ${platform}/${python}/${arch} (${commitSha.substring(0,7)})`;

            // Check if issue already exists for this commit (look for universal issues first)
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'claude-code-fix,build-fix',
              state: 'open'
            });

            // Look for universal issue (without platform specifics)
            const universalIssue = existingIssues.data.find(issue =>
              issue.title.includes(`Build failure resolved (${commitSha.substring(0,7)})`) &&
              !issue.title.includes('/')  // No platform-specific markers
            );

            // Look for platform-specific issue
            const platformIssue = existingIssues.data.find(issue =>
              issue.title.includes(`${platform}/${python}/${arch}`)
            );

            if (existingIssue) {
              // Update existing issue with additional platform info
              const currentBody = existingIssue.body;
              const platformInfo = `- ${{ matrix.buildplat[0] }} / ${{ matrix.python }} / ${{ matrix.buildplat[2] }}`;

              const updatedBody = currentBody.replace(
                /(\*\*Affected Platforms:\*\*\n(?:- [^\n]+\n)*)/,
                `$1${platformInfo}\n`
              ) || currentBody + `\n\n**Additional Platform Fixed:**\n${platformInfo}`;

              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                body: updatedBody
              });

              console.log(`Updated existing issue #${existingIssue.number} with additional platform info`);
            } else {
              // Create new consolidated issue
              const body = `🤖 **Claude Code Automatic Fix Report**

            **Fix Context:**
            - Branch: ${{ github.ref_name }}
            - Commit: ${commitSha}
            - Actor: ${{ github.actor }}
            - Fixed by: Claude Code (automated)

            **Affected Platforms:**
            - ${{ matrix.buildplat[0] }} / ${{ matrix.python }} / ${{ matrix.buildplat[2] }}

            **What Happened:**
            1. Build failed during wheel building process across multiple platforms
            2. Claude Code automatically analyzed the failure
            3. Claude Code provided and implemented a fix
            4. Build should now succeed across all platforms

            **Build logs and Claude Code actions:** https://github.com/${{ github.repository }}/actions/runs/${runId}

            **This is an automated transparency report** - Claude Code has intervened to fix a build failure.

            ⚠️ **Please review the changes** made by Claude Code to ensure they are appropriate.`;

              const issue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: body,
                labels: ['claude-code-fix', 'build-fix']
              });

              console.log(`Created new transparency issue #${issue.data.number} for Claude Code fix`);
            }

      - name: Setup tmate session for manual debugging
        if: failure()
        uses: mxschmitt/action-tmate@v3
        timeout-minutes: 15

      - name: upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.WHEEL_NAME }}
          path: ./wheelhouse/*.whl

  deploy:
    name: Publish to (Test)PyPI
    # IMPORTANT: this permission is mandatory for trusted publishing
    runs-on: ubuntu-latest
    needs:
      - build_wheels
    # Only run deploy on pushes (not PRs) to avoid duplicate publishing
    if: github.event_name == 'push'
    permissions:
      id-token: write  # Required for trusted publishing to PyPI
      contents: read   # Required for checkout
      actions: read    # Required for Claude Code to read CI results
      issues: write    # Required for creating transparency issues

    steps:
      - name: Download all the built wheels
        uses: actions/download-artifact@v4
        with:
          path: dist/
          merge-multiple: true

      - name: Validate wheel contents
        run: |
          pip install twine
          twine check dist/*

      - name: Check user authorization for Claude Code
        if: failure()
        id: deploy-auth-check
        uses: actions/github-script@v7
        with:
          script: |
            const authorizedUsers = process.env.CLAUDE_AUTHORIZED_USERS;
            const currentUser = context.actor;
            
            // Check if Claude Code is available and user is authorized
            if (!authorizedUsers) {
              console.log('CLAUDE_AUTHORIZED_USERS secret not configured - skipping Claude Code');
              core.setOutput('authorized', 'false');
              return;
            }
            
            // Check if user is in the authorized list (supports both comma and newline separated)
            const usersList = authorizedUsers.split(/[,\n]/).map(u => u.trim()).filter(u => u);
            
            if (usersList.includes(currentUser)) {
              console.log(`✓ User ${currentUser} is authorized for Claude Code`);
              core.setOutput('authorized', 'true');
            } else {
              console.log(`User ${currentUser} is not authorized for Claude Code`);
              core.setOutput('authorized', 'false');
            }
        env:
          CLAUDE_AUTHORIZED_USERS: ${{ secrets.CLAUDE_AUTHORIZED_USERS }}

      - name: Claude Code automatic deployment failure fix
        if: failure() && steps.deploy-auth-check.outputs.authorized == 'true'
        id: claude-deploy-fix
        uses: anthropics/claude-code-base-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          model: claude-sonnet-4-20250514
          prompt: |
            🚨 **Automated Deployment Failure - Please Fix**

            **Deployment Details:**
            - Workflow: ${{ github.workflow }}
            - Run ID: ${{ github.run_id }}
            - Job: deploy

            **Failure Context:**
            - Branch: ${{ github.ref_name }}
            - Commit: ${{ github.sha }}
            - Actor: ${{ github.actor }}

            The deployment failed during wheel validation or publishing to PyPI/TestPyPI. Please:

            1. **Analyze the deployment failure logs** from this GitHub Actions run
            2. **Check wheel validation issues** or publishing problems
            3. **Provide a fix** with specific code changes
            4. **If this is a PyPI/TestPyPI service issue**, suggest retry strategies
            5. **If unable to fix automatically**, document the issue clearly

            **Focus areas:**
            - Wheel validation errors (twine check)
            - PyPI/TestPyPI publishing issues
            - Authentication problems
            - Package metadata issues
            - Version conflicts

            **This is an automated request** - please provide a direct fix or create an issue if manual intervention is needed.

            ---
            **Custom instructions for deployment failure context:**

            You are analyzing a deployment failure in the SUEWS project. This is a Fortran/Python urban climate model.

            Key deployment information:
            - Publishing: PyPI and TestPyPI
            - Build system: meson-python with cibuildwheel
            - Wheel validation: twine check

            When fixing deployment failures:
            1. Check twine validation output for wheel issues
            2. Look for PyPI publishing errors
            3. Verify package metadata and version
            4. Check authentication and permissions
            5. Consider PyPI service status for transient issues
          allowed_tools: |
            Bash(make dev),
            Bash(make test),
            Bash(git status),
            Bash(git diff),
            Bash(git log --oneline -10),
            Read,Write,Edit,MultiEdit,
            Grep,Glob,LS,
            TodoRead,TodoWrite

      - name: Create transparency issue for Claude Code deployment fix
        if: failure() && steps.deploy-auth-check.outputs.authorized == 'true' && steps.claude-deploy-fix.conclusion == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            const commitSha = '${{ github.sha }}';
            const runId = '${{ github.run_id }}';
            const issueTitle = `✅ Claude Code Fix: Deployment failure resolved (${commitSha.substring(0,7)})`;

            // Check if issue already exists for this commit
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'claude-code-fix,deployment-fix',
              state: 'open'
            });

            const existingIssue = existingIssues.data.find(issue =>
              issue.title.includes(commitSha.substring(0,7))
            );

            if (existingIssue) {
              // Update existing issue to indicate deployment was also fixed
              const currentBody = existingIssue.body;
              const deploymentInfo = `\n\n**Deployment Fix:** Deployment job was also automatically fixed by Claude Code.`;

              if (!currentBody.includes('Deployment Fix:')) {
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: existingIssue.number,
                  body: currentBody + deploymentInfo
                });

                console.log(`Updated existing issue #${existingIssue.number} with deployment fix info`);
              }
            } else {
              // Create new issue for deployment fix
              const body = `🤖 **Claude Code Automatic Deployment Fix Report**

            **Fix Context:**
            - Branch: ${{ github.ref_name }}
            - Commit: ${commitSha}
            - Actor: ${{ github.actor }}
            - Fixed by: Claude Code (automated)

            **What Happened:**
            1. Deployment failed during wheel validation or publishing
            2. Claude Code automatically analyzed the failure
            3. Claude Code provided and implemented a fix
            4. Deployment should now succeed

            **Deployment logs and Claude Code actions:** https://github.com/${{ github.repository }}/actions/runs/${runId}

            **This is an automated transparency report** - Claude Code has intervened to fix a deployment failure.

            ⚠️ **Please review the changes** made by Claude Code to ensure they are appropriate.`;

              const issue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: body,
                labels: ['claude-code-fix', 'deployment-fix']
              });

              console.log(`Created new transparency issue #${issue.data.number} for Claude Code deployment fix`);
            }

      - name: Setup tmate session for manual debugging
        if: failure()
        uses: mxschmitt/action-tmate@v3
        timeout-minutes: 15

      - name: Publish distribution to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1.11
        with:
          packages-dir: dist/
          verbose: true
          skip-existing: true
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository-url: https://test.pypi.org/legacy/

      - name: Publish distribution to PyPI
        if: startsWith(github.ref, 'refs/tags/') && !contains(github.ref, 'dev')
        uses: pypa/gh-action-pypi-publish@release/v1.11
        with:
          packages-dir: dist/
          verbose: true
          skip-existing: true
          password: ${{ secrets.PYPI_API_TOKEN }}
