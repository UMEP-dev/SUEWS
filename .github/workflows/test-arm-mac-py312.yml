name: Test ARM Mac Python 3.12 DailyState Issue (cibuildwheel)

on:
  push:
    branches:
      - feature/pragmatic-test
  workflow_dispatch:

jobs:
  build_wheel_arm_mac_py312:
    name: Build wheel for cp312-macosx arm64 (Debug DailyState)
    runs-on: macos-latest  # This is ARM64 (M1/M2)
    env:
      WHEEL_NAME: cp312-macosx-arm64
      CIBW_BUILD: cp312-macosx*
      CIBW_ARCHS: arm64
      CIBW_BEFORE_ALL_MACOS: >
        brew install gfortran &&
        brew unlink gfortran &&
        brew link gfortran
      CIBW_TEST_REQUIRES: pytest pytest-order
      # Create diagnostic script separately to avoid YAML issues
      CIBW_BEFORE_TEST: |
        cat > {project}/diagnose_dailystate.py << 'EOFSCRIPT'
        import supy as sp
        import numpy as np
        import pandas as pd
        from supy._post import resample_output, dict_var_aggm
        
        print("=== DailyState Diagnostic in cibuildwheel ===")
        print(f"NumPy version: {np.__version__}")
        print(f"Pandas version: {pd.__version__}")
        
        # Load and run sample data
        df_state_init, df_forcing = sp.load_SampleData()
        df_forcing_multi_day = df_forcing.iloc[:288*10]  # 10 days
        
        print("\nRunning simulation...")
        df_output, df_state_final = sp.run_supy(df_forcing_multi_day, df_state_init)
        
        # Check DailyState
        if 'DailyState' in df_output.columns.get_level_values('group').unique():
            df_dailystate = df_output.loc[:, 'DailyState']
            print(f"\nDailyState shape: {df_dailystate.shape}")
            print(f"Non-NaN count: {df_dailystate.notna().sum().sum()}")
            
            # Check NaN patterns
            col_nan_counts = df_dailystate.isna().sum()
            print(f"\nColumns with all NaN: {(col_nan_counts == len(df_dailystate)).sum()}")
            print(f"Columns with no NaN: {(col_nan_counts == 0).sum()}")
            print(f"Columns with mixed NaN: {((col_nan_counts > 0) & (col_nan_counts < len(df_dailystate))).sum()}")
            
            # Show mixed NaN columns
            mixed_nan_cols = col_nan_counts[(col_nan_counts > 0) & (col_nan_counts < len(df_dailystate))].index
            if len(mixed_nan_cols) > 0:
                print(f"\nMixed NaN columns: {mixed_nan_cols.tolist()}")
            
            # Test dropna behavior
            df_dropna_all = df_dailystate.dropna(how='all')
            df_dropna_any = df_dailystate.dropna()
            print(f"\nDropna results:")
            print(f"  dropna(how='all'): {df_dropna_all.shape}")
            print(f"  dropna(): {df_dropna_any.shape}")
            
            if df_dropna_any.empty and not df_dropna_all.empty:
                print("\n!!! ISSUE FOUND: dropna() removes all rows but dropna(how='all') doesn't")
                # Show first row with data
                first_data_idx = df_dropna_all.index[0]
                row_data = df_dailystate.loc[first_data_idx]
                nan_mask = row_data.isna()
                print(f"First row with data has {nan_mask.sum()} NaN out of {len(row_data)} columns")
                print(f"NaN columns: {row_data[nan_mask].index.tolist()}")
                
            # Check aggregation functions
            print(f"\nDailyState in dict_var_aggm: {'DailyState' in dict_var_aggm}")
            if 'DailyState' in dict_var_aggm:
                print(f"Number of DailyState aggregation rules: {len(dict_var_aggm['DailyState'])}")
        EOFSCRIPT
      CIBW_TEST_COMMAND: >
        export PYTHONUNBUFFERED=1 &&
        export SUPY_LOG=DEBUG &&
        echo "=== Starting cibuildwheel test phase ===" &&
        echo "Python version:" && python --version &&
        echo "Installed packages:" && pip list | grep -E "(numpy|pandas|supy)" &&
        echo "Running DailyState test with debug logging..." &&
        python -m pytest {project}/test/test_resample_output.py::TestResampleOutput::test_resample_with_dailystate -vvs --tb=short 2>&1 | tee {project}/dailystate_test.log &&
        echo "Running all resample tests..." &&
        python -m pytest {project}/test/test_resample_output.py -v --tb=short 2>&1 | tee -a {project}/dailystate_test.log &&
        echo "Running diagnostic script..." &&
        python {project}/diagnose_dailystate.py 2>&1 | tee -a {project}/dailystate_test.log
      MACOSX_DEPLOYMENT_TARGET: "14.0"

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: Build wheels with cibuildwheel
        uses: pypa/cibuildwheel@v3.0.0

      # Copy debug log from cibuildwheel environment
      - name: Extract debug logs
        if: always()
        run: |
          # Find and copy any debug logs
          echo "Looking for debug logs..."
          find . -name "*dailystate*.log" -type f | while read f; do
            echo "Found: $f"
          done
          
          # Copy the main log if it exists
          if [ -f dailystate_test.log ]; then
            cp dailystate_test.log dailystate_final_debug.log
            echo "Copied main test log"
          else
            echo "Debug log not found in expected location" > dailystate_final_debug.log
            find . -name "*dailystate*.log" -type f >> dailystate_final_debug.log
          fi

      - name: Upload debug logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cibw-dailystate-debug-logs
          path: |
            dailystate_final_debug.log
            dailystate_test.log
            diagnose_dailystate.py
          retention-days: 7

      - name: Upload built wheel
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.WHEEL_NAME }}
          path: ./wheelhouse/*.whl