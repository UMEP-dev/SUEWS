name: Claude Code Review
# This workflow uses Claude to automatically review pull requests
# Reviews are formatted with collapsible HTML sections for better readability

on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'Pull request number to review'
        required: true
        type: number

jobs:
  claude-review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write  # Changed from read to write for PR comments
      issues: read
      id-token: write

    steps:
      - name: Get PR details
        id: pr-details
        uses: actions/github-script@v7
        with:
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ inputs.pr_number }}
            });
            core.setOutput('title', pr.data.title);
            core.setOutput('user', pr.data.user.login);
            return pr.data;

      - name: Check if review should be skipped
        id: skip-check
        env:
          PR_TITLE: ${{ steps.pr-details.outputs.title }}
        run: |
          # Convert title to lowercase for case-insensitive matching
          TITLE_LOWER=$(echo "$PR_TITLE" | tr '[:upper:]' '[:lower:]')

          # Check for skip keywords
          if echo "$TITLE_LOWER" | grep -E "\b(wip|draft|skip[- ]review|no[- ]review|do not review|dnr)\b" > /dev/null; then
            echo "Review should be skipped due to keyword in title: $PR_TITLE"
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "Review will proceed"
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Check user authorization
        if: steps.skip-check.outputs.skip != 'true'
        id: auth-check
        env:
          AUTHORIZED_USERS: ${{ secrets.CLAUDE_AUTHORIZED_USERS }}
          WORKFLOW_USER: ${{ github.actor }}
        run: |
          # STRICT ACCESS: Require CLAUDE_AUTHORIZED_USERS to be configured
          if [ -z "$AUTHORIZED_USERS" ]; then
            echo "CLAUDE_AUTHORIZED_USERS secret not configured - skipping review"
            echo "authorized=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Check if workflow triggerer is in the authorized list (supports both comma-separated and newline-separated)
          # Convert commas to newlines for easier matching
          USERS_LIST=$(echo "$AUTHORIZED_USERS" | tr ',' '\n' | tr -d ' ')

          if echo "$USERS_LIST" | grep -q "^$WORKFLOW_USER$"; then
            echo "‚úì User $WORKFLOW_USER is authorised to trigger Claude review"
            echo "authorized=true" >> $GITHUB_OUTPUT
          else
            echo "User $WORKFLOW_USER is not in the authorized list - skipping Claude review"
            echo "authorized=false" >> $GITHUB_OUTPUT
          fi

      - name: Checkout repository
        if: steps.skip-check.outputs.skip != 'true' && steps.auth-check.outputs.authorized == 'true'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: refs/pull/${{ inputs.pr_number }}/merge

      - name: Run Claude Code Review
        if: steps.skip-check.outputs.skip != 'true' && steps.auth-check.outputs.authorized == 'true'
        id: claude-review
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # Use Claude Opus 4 for better code review quality
          model: claude-opus-4-20250514

          # Custom instructions for British English and project standards
          custom_instructions: |
            IMPORTANT: Always use British English spelling and grammar in all your responses, reviews, and written content.
            This project follows British English conventions throughout its documentation and codebase.
            Examples: use "organisation" not "organization", "colour" not "color", "centre" not "center", etc.
            
            Follow project standards:
            - Coding guidelines: dev-ref/CODING_GUIDELINES.md
            - Testing patterns: dev-ref/testing/
            - Error handling: dev-ref/testing/ERROR_HANDLING_PATTERNS.md
            
            DOCUMENTATION REQUIREMENTS:
            - Check if code changes have corresponding documentation updates in docs/
            - Verify data model changes are reflected in docs/generate_datamodel_rst.py
            - Ensure configuration schema changes update docs/gen_schema.py
            - Check that examples and tutorials are updated for API changes
            - Flag missing documentation updates as action items
            - Verify CHANGELOG.md is updated for remarkable changes with appropriate category:
              [feature], [bugfix], [change], [maintenance], or [doc]

          # Direct prompt for automated review (no @claude mention needed)
          direct_prompt: |
            Please review this pull request and provide structured feedback using collapsible HTML sections for better organization.

            Format your response using this template:

            ## PR Review Summary

            Brief 2-3 sentence overview of the PR and main findings.

            <details>
            <summary>üìã <b>Code Quality & Best Practices</b></summary>

            - Review code structure, naming conventions, and adherence to best practices
            - Check for code duplication and maintainability
            - Assess readability and documentation

            </details>

            <details>
            <summary>üêõ <b>Potential Bugs & Issues</b></summary>

            - Identify any logical errors or edge cases
            - Check for null/undefined handling
            - Review error handling and validation

            </details>

            <details>
            <summary>‚ö° <b>Performance Considerations</b></summary>

            - Analyze algorithmic complexity
            - Check for unnecessary operations or memory usage
            - Suggest optimizations where applicable

            </details>

            <details>
            <summary>üîí <b>Security Concerns</b></summary>

            - Review for potential security vulnerabilities
            - Check input validation and sanitization
            - Assess authentication/authorization if applicable

            </details>

            <details>
            <summary>üß™ <b>Test Coverage</b></summary>

            - Evaluate existing test coverage
            - Suggest additional test cases
            - Check for edge cases in tests

            </details>

            <details>
            <summary>üìö <b>Documentation Updates</b></summary>

            - Check if code changes have corresponding docs/ updates
            - Verify data model changes update generate_datamodel_rst.py
            - Ensure configuration changes update gen_schema.py
            - Review if examples/tutorials reflect API changes
            - Verify CHANGELOG.md updated for remarkable changes
            - List any missing documentation updates

            </details>

            <details>
            <summary>üí° <b>Suggestions & Improvements</b></summary>

            - Provide constructive suggestions for improvement
            - Recommend alternative approaches if applicable
            - Highlight particularly good practices

            </details>

            Be constructive and helpful in your feedback. Use checkboxes (- [ ]) for actionable items.

          # Use sticky comments to update the same review on subsequent pushes
          use_sticky_comment: true

          # Optional: Customize review based on file types
          # direct_prompt: |
          #   Review this PR focusing on:
          #   - For TypeScript files: Type safety and proper interface usage
          #   - For API endpoints: Security, input validation, and error handling
          #   - For React components: Performance, accessibility, and best practices
          #   - For tests: Coverage, edge cases, and test quality

          # Optional: Different prompts for different authors
          # direct_prompt: |
          #   ${{ github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR' &&
          #   'Welcome! Please review this PR from a first-time contributor. Be encouraging and provide detailed explanations for any suggestions.' ||
          #   'Please provide a thorough code review focusing on our coding standards and best practices.' }}

          # Optional: Add specific tools for running tests or linting
          # allowed_tools: "Bash(npm run test),Bash(npm run lint),Bash(npm run typecheck)"

