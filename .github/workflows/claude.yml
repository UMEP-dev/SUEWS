# Claude Workflow - General and Code Review
#
# This workflow handles all Claude requests when authorized users mention @claude.
#
# Features:
# - Issue to PR conversion
# - Code implementation assistance
# - Bug fixing automation
# - Code review and security analysis
# - Custom instructions based on CLAUDE.md
#
# Usage:
#   - General help: "@claude help me implement X"
#   - Code review: "@claude review this for security issues"
#   - Complex tasks: "@claude complex: refactor the validation system"
#   - On issues: Add "@claude" to convert to PR
#
# Note: REQUIRED - Set CLAUDE_AUTHORIZED_USERS secret in repository settings
# Formats supported:
#   - Comma-separated: "sunt05,user2,user3"
#   - Newline-separated (one username per line)
#
name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request:
    types: [opened, synchronize]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude') || github.event.action == 'assigned' && github.event.assignee.login == 'claude-bot')) ||
      (github.event_name == 'pull_request' && contains(github.event.pull_request.body, '@claude'))
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
    steps:
      - name: Check user authorization
        id: auth-check
        env:
          AUTHORIZED_USERS: ${{ secrets.CLAUDE_AUTHORIZED_USERS }}
          COMMENT_USER: ${{ github.event.comment.user.login || github.event.issue.user.login || github.event.pull_request.user.login || github.event.review.user.login }}
        run: |
          # STRICT ACCESS: Require CLAUDE_AUTHORIZED_USERS to be configured
          if [ -z "$AUTHORIZED_USERS" ]; then
            echo "❌ CLAUDE_AUTHORIZED_USERS secret not configured - access denied"
            echo "authorized=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Check if user is in the authorized list (supports both comma-separated and newline-separated)
          # Convert commas to newlines for easier matching
          USERS_LIST=$(echo "$AUTHORIZED_USERS" | tr ',' '\n' | tr -d ' ')

          if echo "$USERS_LIST" | grep -q "^$COMMENT_USER$"; then
            echo "✅ User $COMMENT_USER is authorised"
            echo "authorized=true" >> $GITHUB_OUTPUT
          else
            echo "❌ User $COMMENT_USER is not authorised"
            echo "authorized=false" >> $GITHUB_OUTPUT
          fi

      - name: Comment if unauthorised
        if: steps.auth-check.outputs.authorized == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = context.issue?.number || context.payload.pull_request?.number || context.payload.issue?.number;
            if (issueNumber) {
              const comment = {
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: '❌ Access denied. Claude is restricted to authorised users only. Please contact the repository maintainers to request access.'
              };
              await github.rest.issues.createComment(comment);
            }
            core.setFailed('Unauthorised user');

      - name: Checkout repository
        if: steps.auth-check.outputs.authorized == 'true'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better context

      - name: Set up Python environment
        if: steps.auth-check.outputs.authorized == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache dependencies
        if: steps.auth-check.outputs.authorized == 'true'
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.local/share/mamba
          key: ${{ runner.os }}-deps-${{ hashFiles('**/pyproject.toml') }}

      - name: Run Claude Code
        if: steps.auth-check.outputs.authorized == 'true'
        id: claude
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}

          # Use Claude Opus 4 for complex tasks (optional)
          model: ${{ contains(github.event.comment.body || github.event.issue.body || '', 'complex') && 'claude-opus-4-20250514' || 'claude-sonnet-4-20250514' }}

          # Enhanced allowed tools for SUEWS development
          allowed_tools: |
            Bash(make dev),
            Bash(make test),
            Bash(make clean),
            Bash(pytest test/*),
            Bash(python -m pytest test/* -v),
            Bash(pip install -e .),
            Bash(git status),
            Bash(git diff),
            Bash(git log --oneline -10),
            Bash(rg *),
            Bash(find . -name "*.py" -o -name "*.f95"),
            Read,Write,Edit,MultiEdit,
            Grep,Glob,LS,
            TodoRead,TodoWrite,
            WebSearch,WebFetch

          # Custom instructions based on CLAUDE.md and project standards
          custom_instructions: |
            You are working on SUEWS (Surface Urban Energy and Water Balance Scheme), a Fortran/Python urban climate model.

            Key project information:
            - Main languages: Fortran (f95), Python
            - Build system: meson-python
            - Testing: pytest
            - Documentation: Sphinx
            - Python wrapper: supy

            Follow these guidelines:
            1. Always run 'make test' after making changes
            2. Use British English in all documentation and comments
            3. Follow existing code patterns and conventions
            4. For Fortran changes, run 'make dev' to rebuild
            5. Check CLAUDE.md for project-specific instructions
            6. When creating PRs, reference related GitHub issues


          # Enhanced direct prompt handling for both general and review requests
          direct_prompt: |
            ${{ github.event.comment.body || github.event.issue.body || github.event.pull_request.body || '' }}

            Context:
            - Event: ${{ github.event_name }}
            - User: @${{ github.event.comment.user.login || github.event.issue.user.login || github.event.pull_request.user.login }}
            - Issue/PR #${{ github.issue.number || github.event.pull_request.number }}

            Instructions:
            1. If the request mentions "review", "security", "best practices", or "code quality":
               - Perform a thorough code review
               - Check for security vulnerabilities, performance issues, and adherence to coding standards
               - Be constructive and provide specific suggestions

            2. For general requests:
               - Help with implementation, bug fixes, or feature development
               - If this is an issue, consider if it should be converted to a PR
               - For PRs, focus on the specific changes requested

            3. Always follow the SUEWS project guidelines and use British English.

          # Turn limit for Claude
          max_turns: 5

          # Environment variables for Claude
          claude_env: |
            GITHUB_ISSUE_NUMBER: ${{ github.issue.number || github.event.pull_request.number }}
            GITHUB_ACTOR: ${{ github.actor }}
            GITHUB_EVENT_NAME: ${{ github.event_name }}
            PROJECT_NAME: SUEWS

      - name: Post-process Claude output
        if: steps.auth-check.outputs.authorized == 'true' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = context.issue?.number || context.payload.pull_request?.number;
            if (!issueNumber) return;

            // Add reaction to indicate completion
            try {
              if (context.eventName === 'issue_comment' || context.eventName === 'pull_request_review_comment') {
                await github.rest.reactions.createForIssueComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: context.payload.comment.id,
                  content: '+1'
                });
              }
            } catch (e) {
              console.log('Could not add reaction:', e.message);
            }

            // Add summary comment if Claude created a PR
            if (context.eventName === 'issues' && steps.claude.outputs.pr_number) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: `✅ Claude has created PR #${steps.claude.outputs.pr_number} to address this issue.`
              });
            }

