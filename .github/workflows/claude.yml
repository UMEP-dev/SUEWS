name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
      actions: read # Required for Claude to read CI results on PRs
    steps:
      - name: Check user authorization
        id: auth-check
        env:
          AUTHORIZED_USERS: ${{ secrets.CLAUDE_AUTHORIZED_USERS }}
          COMMENT_USER: ${{ github.event.comment.user.login || github.event.issue.user.login || github.event.pull_request.user.login || github.event.review.user.login }}
        run: |
          # STRICT ACCESS: Require CLAUDE_AUTHORIZED_USERS to be configured
          if [ -z "$AUTHORIZED_USERS" ]; then
            echo "CLAUDE_AUTHORIZED_USERS secret not configured - access denied"
            echo "authorized=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Check if user is in the authorized list (supports both comma-separated and newline-separated)
          # Convert commas to newlines for easier matching
          USERS_LIST=$(echo "$AUTHORIZED_USERS" | tr ',' '\n' | tr -d ' ')

          if echo "$USERS_LIST" | grep -q "^$COMMENT_USER$"; then
            echo "âœ“ User $COMMENT_USER is authorised"
            echo "authorized=true" >> $GITHUB_OUTPUT
          else
            echo "User $COMMENT_USER is not authorised"
            echo "authorized=false" >> $GITHUB_OUTPUT
          fi

      - name: Comment if unauthorised
        if: steps.auth-check.outputs.authorized == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = context.issue?.number || context.payload.pull_request?.number || context.payload.issue?.number;
            if (issueNumber) {
              const comment = {
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: 'Access denied. Claude is restricted to authorised users only. Please contact the repository maintainers to request access.'
              };
              await github.rest.issues.createComment(comment);
            }
            core.setFailed('Unauthorised user');

      - name: Checkout repository
        if: steps.auth-check.outputs.authorized == 'true'
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code
        if: steps.auth-check.outputs.authorized == 'true'
        id: claude
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # This is an optional setting that allows Claude to read CI results on PRs
          additional_permissions: |
            actions: read
          
          # Use Claude Opus 4 by default for better performance
          model: claude-opus-4-20250514
          
          # Enhanced allowed tools for SUEWS development
          allowed_tools: |
            Bash(make dev),
            Bash(make test),
            Bash(make clean),
            Bash(pytest test/*),
            Bash(python -m pytest test/* -v),
            Bash(pip install -e .),
            Bash(git status),
            Bash(git diff),
            Bash(git log --oneline -10),
            Bash(rg *),
            Bash(find . -name "*.py" -o -name "*.f95"),
            Read,Write,Edit,MultiEdit,
            Grep,Glob,LS,
            TodoRead,TodoWrite,
            WebSearch,WebFetch
          
          # Custom instructions based on CLAUDE.md and project standards
          custom_instructions: |
            IMPORTANT: Always use British English spelling and grammar in all your responses and written content.
            
            You are working on SUEWS (Surface Urban Energy and Water Balance Scheme), a Fortran/Python urban climate model.
            
            Key project information:
            - Main languages: Fortran (f95), Python
            - Build system: meson-python
            - Testing: pytest
            - Documentation: Sphinx
            - Python wrapper: supy
            
            Follow these guidelines:
            1. Always run 'make test' after making changes
            2. Use British English in all documentation and comments
            3. Follow existing code patterns and conventions
            4. For Fortran changes, run 'make dev' to rebuild
            5. Check CLAUDE.md for project-specific instructions
            6. When creating PRs, reference related GitHub issues
            7. Follow coding standards in dev-ref/CODING_GUIDELINES.md
            8. Use testing patterns from dev-ref/testing/
          
          # Environment variables for Claude
          claude_env: |
            GITHUB_ISSUE_NUMBER: ${{ github.issue.number || github.event.pull_request.number }}
            GITHUB_ACTOR: ${{ github.actor }}
            GITHUB_EVENT_NAME: ${{ github.event_name }}
            PROJECT_NAME: SUEWS

