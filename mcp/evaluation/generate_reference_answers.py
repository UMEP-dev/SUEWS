#!/usr/bin/env python3
"""
Generate reference answers using Claude Code with full SUEWS repository access.

This script allows Claude Code to answer each question with complete access
to the SUEWS codebase, documentation, and physics implementations. These
answers serve as the ground truth (score = 100) for evaluation.

The reference answers should be:
- Comprehensive and accurate
- Based on actual source code when relevant
- Include technical details from Fortran implementations
- Cite specific files and line numbers when appropriate
"""

import json
from pathlib import Path
from typing import Any


def load_questions(question_bank_path: str = "question_bank.json") -> list[dict[str, Any]]:
    """Load questions from JSON file."""
    with open(question_bank_path, encoding="utf-8") as f:
        data = json.load(f)
    return data["questions"]


def load_existing_references(ref_file: Path) -> dict[str, str]:
    """Load existing reference answers if file exists."""
    if ref_file.exists():
        with open(ref_file, encoding="utf-8") as f:
            data = json.load(f)
            return data.get("reference_answers", {})
    return {}


def save_reference_answers(
    answers: dict[str, str],
    output_file: str = "evaluation_results/reference_answers.json",
) -> None:
    """Save reference answers to JSON file."""

    output_path = Path(output_file)
    output_path.parent.mkdir(exist_ok=True)

    data = {
        "description": "Reference answers generated by Claude Code with full SUEWS repository access",
        "note": "These answers serve as ground truth (score = 100) for MCP evaluation",
        "total_questions": len(answers),
        "reference_answers": answers,
    }

    with open(output_path, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)


def display_question(question_data: dict[str, Any]) -> None:
    """Display question details for Claude Code to answer."""

    print(f"\n{'='*70}")
    print(f"Question ID: {question_data['id']}")
    print(f"Category: {question_data['category']}")
    print(f"Difficulty: {question_data['difficulty']}")
    print(f"{'='*70}\n")
    print(f"Question: {question_data['question']}\n")
    print(f"Topics: {', '.join(question_data['topics'])}\n")
    print(f"{'='*70}\n")


def main():
    """Main script for generating reference answers."""

    print("="*70)
    print("REFERENCE ANSWER GENERATION")
    print("="*70)
    print("\nThis script helps Claude Code generate ground truth answers.")
    print("Claude Code should answer each question with full repository access.\n")

    # Load questions
    questions = load_questions()
    print(f"Loaded {len(questions)} questions from question bank\n")

    # Load existing reference answers
    ref_file = Path("evaluation_results/reference_answers.json")
    existing_answers = load_existing_references(ref_file)
    print(f"Found {len(existing_answers)} existing reference answers\n")

    # Determine which questions need answers
    remaining_questions = [
        q for q in questions
        if q["id"] not in existing_answers
    ]

    if not remaining_questions:
        print("âœ“ All questions have reference answers!")
        print(f"Reference file: {ref_file}")
        return

    print(f"Questions needing answers: {len(remaining_questions)}")
    print("\nOptions:")
    print("  1. Generate answers interactively (one by one)")
    print("  2. Display all questions (for batch processing)")
    print("  3. Exit\n")

    choice = input("Select option (1-3): ").strip()

    if choice == "1":
        # Interactive mode - one question at a time
        for i, question_data in enumerate(remaining_questions, 1):
            display_question(question_data)

            print(f"Progress: {i}/{len(remaining_questions)}")
            print("\n[Waiting for Claude Code to provide reference answer...]\n")
            print("After Claude Code responds, the answer should be saved to:")
            print(f"  {ref_file}\n")

            input("Press Enter to continue to next question...")

    elif choice == "2":
        # Batch mode - display all questions
        print("\n" + "="*70)
        print("ALL QUESTIONS NEEDING REFERENCE ANSWERS")
        print("="*70 + "\n")

        for question_data in remaining_questions:
            print(f"\n## {question_data['id']}: {question_data['question']}")
            print(f"**Category:** {question_data['category']}")
            print(f"**Difficulty:** {question_data['difficulty']}")
            print(f"**Topics:** {', '.join(question_data['topics'])}")
            print()

        print("\n" + "="*70)
        print(f"Total questions displayed: {len(remaining_questions)}")
        print("="*70)
        print(f"\nClaude Code should answer these and save to: {ref_file}")

    else:
        print("\nExiting...")
        return

    print("\nReference answers will be saved to:")
    print(f"  {ref_file}")
    print("\nUse these answers in evaluation with evaluate_mcp.py")


if __name__ == "__main__":
    main()
