name: Build and Publish Python wheels to PyPI and TestPyPI

# Prevent concurrent builds on the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    paths: # Push events containing matching files
      - "src/suews/**"
      - "src/supy/**"
      - "src/supy_driver/**"
      - ".github/workflows/build-publish_to_pypi.yml"
      - "test/**"
      - "pyproject.toml"
      - "meson.build"

  pull_request:
    paths: # PR events containing matching files
      - "src/suews/**"
      - "src/supy/**"
      - "src/supy_driver/**"
      - ".github/workflows/build-publish_to_pypi.yml"
      - "test/**"
      - "pyproject.toml"
      - "meson.build"
jobs:
  build_wheels:
    name: Build wheel for ${{ matrix.python }}-${{ matrix.buildplat[1] }} ${{ matrix.buildplat[2] }}
    runs-on: ${{ matrix.buildplat[0] }}
    permissions:
      contents: read
      pull-requests: read  # Required for Claude Code
      issues: write        # Required for creating transparency issues
      actions: read        # Required for Claude Code to read CI results
      id-token: write      # Required for Claude Code authentication
    strategy:
      matrix:
        buildplat:
            - [ubuntu-latest, manylinux, x86_64]
            - [macos-13, macosx, x86_64]
            - [macos-latest, macosx, arm64]
            - [windows-latest, win, AMD64]

        python: ["cp311", "cp312"]  # Reduced for faster testing
        # exclude:
        # - buildplat: [macos-latest, macosx, arm64]
        #   python: ["cp38", "cp39"]

      fail-fast: false
    env:
      IS_32_BIT: ${{ matrix.buildplat[2] == 'x86' }}
      WHEEL_NAME: ${{ matrix.python }}-${{ matrix.buildplat[1] }}-${{ matrix.buildplat[2] }}
      CIBW_BUILD: ${{ matrix.python }}-${{ matrix.buildplat[1] }}*
      CIBW_ARCHS: ${{ matrix.buildplat[2] }}
      CIBW_ENVIRONMENT_PASS_LINUX: RUNNER_OS
      CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_28
      CIBW_MANYLINUX_AARCH64_IMAGE: manylinux_2_28
      CIBW_BEFORE_ALL_MACOS: >
        brew install gfortran &&
        brew unlink gfortran &&
        brew link gfortran
      CIBW_BEFORE_ALL_WINDOWS: >
        C:\msys64\usr\bin\bash.exe -lc "pacman -Syu --noconfirm" &&
        C:\msys64\usr\bin\bash.exe -lc "pacman -S --needed --noconfirm mingw-w64-ucrt-x86_64-gcc mingw-w64-ucrt-x86_64-gcc-fortran mingw-w64-ucrt-x86_64-binutils mingw-w64-ucrt-x86_64-make mingw-w64-ucrt-x86_64-openblas"
      CIBW_ENVIRONMENT_WINDOWS: >
        PATH="C:\\msys64\\ucrt64\\bin;$PATH"
        CC=gcc
        CXX=g++
        FC=gfortran
        CFLAGS="-D__USE_MINGW_ANSI_STDIO=1 -mlong-double-64"
        CXXFLAGS="-D__USE_MINGW_ANSI_STDIO=1 -mlong-double-64"
        FCFLAGS="-fno-optimize-sibling-calls"
        LDFLAGS="-lucrt -static-libgcc -static-libgfortran -LC:/msys64/ucrt64/lib -lsetjmp_compat"
      CIBW_BEFORE_BUILD_WINDOWS: >
        echo Creating setjmp compatibility library... &&
        echo int _setjmpex(void* buf) { extern int __intrinsic_setjmpex(void*); return __intrinsic_setjmpex(buf); } > setjmp_compat.c &&
        C:\msys64\ucrt64\bin\gcc.exe -c setjmp_compat.c -o setjmp_compat.o &&
        C:\msys64\ucrt64\bin\ar.exe rcs libsetjmp_compat.a setjmp_compat.o &&
        echo Library created, checking contents: &&
        C:\msys64\ucrt64\bin\nm.exe libsetjmp_compat.a &&
        echo Copying to standard locations: &&
        copy libsetjmp_compat.a C:\msys64\ucrt64\lib\ &&
        copy libsetjmp_compat.a C:\msys64\ucrt64\x86_64-w64-mingw32\lib\ &&
        echo Verifying library locations: &&
        dir C:\msys64\ucrt64\lib\libsetjmp_compat.a &&
        dir C:\msys64\ucrt64\x86_64-w64-mingw32\lib\libsetjmp_compat.a &&
        where python &&
        where gcc &&
        gcc --version &&
        pip install delvewheel
      CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: "delvewheel repair -w {dest_dir} {wheel}"
      CIBW_TEST_REQUIRES: pytest
      CIBW_TEST_COMMAND_MACOS: "python -m pytest '{project}/test'"
      CIBW_TEST_COMMAND_LINUX: "python -m pytest '{project}/test'"
      CIBW_TEST_COMMAND_WINDOWS: "python -m pytest {project}\\test"
      # CIBW_TEST_SKIP: "cp310-macosx_arm64" # skip test on arm64 on python 3.10 - cannot pass the water balance test for unknown reason even though it should be the same as x86_64
      MACOSX_DEPLOYMENT_TARGET: ${{ matrix.buildplat[0] == 'macos-13' && '13.0' || '14.0' }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
            python-version: 3.12

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.22.0

      - name: Create issue for build failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const platform = '${{ matrix.buildplat[0] }}';
            const python = '${{ matrix.python }}';
            const arch = '${{ matrix.buildplat[2] }}';
            const runId = '${{ github.run_id }}';
            const sha = '${{ github.sha }}';
            
            const issueTitle = `ðŸš¨ Build failure: ${platform}/${python}/${arch} (${sha.substring(0,7)})`;
            
            const body = `## Build Failure Report

**Platform**: ${platform}
**Python**: ${python}
**Architecture**: ${arch}
**Branch**: ${{ github.ref_name }}
**Commit**: ${sha}
**Actor**: ${{ github.actor }}

### Failure Details
[View full build logs](https://github.com/${{ github.repository }}/actions/runs/${runId})

### Debug This Issue
[ðŸ”§ Launch Debug Environment](https://github.com/${{ github.repository }}/actions/workflows/debug-build.yml?platform=${platform}&python=${python}&issue=${issueTitle})

### Quick Diagnostics
\`\`\`bash
# Platform-specific diagnostics
${platform === 'windows-latest' ? `where python
where gcc
where bash
echo %PATH%` : `which python
which gcc
which gfortran
echo $PATH`}
\`\`\`

---
*This issue was automatically created. Use the debug link above to investigate and fix.*`;
            
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: body,
              labels: ['build-failure', platform]
            });
            
            console.log(`Created issue #${issue.data.number} for build failure`);

      - name: upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.WHEEL_NAME }}
          path: ./wheelhouse/*.whl

  deploy:
    name: Publish to (Test)PyPI
    # IMPORTANT: this permission is mandatory for trusted publishing
    runs-on: ubuntu-latest
    needs:
      - build_wheels
    # Only run deploy on pushes (not PRs) to avoid duplicate publishing
    if: github.event_name == 'push'
    permissions:
      id-token: write  # Required for trusted publishing to PyPI
      contents: read   # Required for checkout
      actions: read    # Required for Claude Code to read CI results
      issues: write    # Required for creating transparency issues

    steps:
      - name: Download all the built wheels
        uses: actions/download-artifact@v4
        with:
          path: dist/
          merge-multiple: true

      - name: Validate wheel contents
        run: |
          pip install twine
          twine check dist/*

      - name: Create issue for deployment failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const runId = '${{ github.run_id }}';
            const sha = '${{ github.sha }}';
            
            const issueTitle = `ðŸš¨ Deployment failure (${sha.substring(0,7)})`;
            
            const body = `## Deployment Failure Report

**Job**: deploy
**Branch**: ${{ github.ref_name }}
**Commit**: ${sha}
**Actor**: ${{ github.actor }}

### Failure Details
[View deployment logs](https://github.com/${{ github.repository }}/actions/runs/${runId})

### Debug This Issue
[ðŸ”§ Launch Debug Environment](https://github.com/${{ github.repository }}/actions/workflows/debug-build.yml?platform=ubuntu-latest&python=cp312&issue=${issueTitle})

### Common Issues
- Wheel validation errors (twine check)
- PyPI/TestPyPI authentication issues
- Package metadata problems
- Version conflicts

---
*This issue was automatically created. Use the debug link above to investigate and fix.*`;
            
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: body,
              labels: ['deployment-failure']
            });
            
            console.log(`Created issue #${issue.data.number} for deployment failure`);

      - name: Publish distribution to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1.11
        with:
          packages-dir: dist/
          verbose: true
          skip-existing: true
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository-url: https://test.pypi.org/legacy/

      - name: Publish distribution to PyPI
        if: startsWith(github.ref, 'refs/tags/') && !contains(github.ref, 'dev')
        uses: pypa/gh-action-pypi-publish@release/v1.11
        with:
          packages-dir: dist/
          verbose: true
          skip-existing: true
          password: ${{ secrets.PYPI_API_TOKEN }}
