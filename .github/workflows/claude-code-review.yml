name: Claude Code Review
# This workflow uses Claude to automatically review pull requests
# Reviews are formatted with collapsible HTML sections for better readability

on:
  pull_request:
    types: [opened, synchronize]
    # Optional: Only run on specific file changes
    # paths:
    #   - "src/**/*.ts"
    #   - "src/**/*.tsx"
    #   - "src/**/*.js"
    #   - "src/**/*.jsx"

jobs:
  claude-review:
    # Optional: Filter by PR author
    # if: |
    #   github.event.pull_request.user.login == 'external-contributor' ||
    #   github.event.pull_request.user.login == 'new-developer' ||
    #   github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR'
    
    # Auto-skip review for WIP PRs - checks for these patterns (case-insensitive):
    # - WIP, Work in Progress, Draft, [WIP], [DRAFT], Do Not Merge, DNM
    
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write  # Changed from read to write for PR comments
      issues: read
      id-token: write
    
    steps:
      - name: Check PR title for WIP
        id: wip-check
        env:
          PR_TITLE: ${{ github.event.pull_request.title }}
        run: |
          # Skip review if PR title indicates work in progress
          if echo "$PR_TITLE" | grep -iE '(wip|work in progress|draft|\[wip\]|\[draft\]|do not merge|dnm)'; then
            echo "PR title indicates work in progress - skipping Claude review"
            echo "skip_review=true" >> $GITHUB_OUTPUT
          else
            echo "PR title doesn't indicate WIP - proceeding with review"
            echo "skip_review=false" >> $GITHUB_OUTPUT
          fi

      - name: Check user authorization
        id: auth-check
        if: steps.wip-check.outputs.skip_review == 'false'
        env:
          AUTHORIZED_USERS: ${{ secrets.CLAUDE_AUTHORIZED_USERS }}
          PR_USER: ${{ github.event.pull_request.user.login }}
        run: |
          # STRICT ACCESS: Require CLAUDE_AUTHORIZED_USERS to be configured
          if [ -z "$AUTHORIZED_USERS" ]; then
            echo "CLAUDE_AUTHORIZED_USERS secret not configured - skipping review"
            echo "authorized=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Check if PR author is in the authorized list (supports both comma-separated and newline-separated)
          # Convert commas to newlines for easier matching
          USERS_LIST=$(echo "$AUTHORIZED_USERS" | tr ',' '\n' | tr -d ' ')

          if echo "$USERS_LIST" | grep -q "^$PR_USER$"; then
            echo "‚úì PR author $PR_USER is authorised for Claude review"
            echo "authorized=true" >> $GITHUB_OUTPUT
          else
            echo "PR author $PR_USER is not in the authorized list - skipping Claude review"
            echo "authorized=false" >> $GITHUB_OUTPUT
          fi

      - name: Checkout repository
        if: steps.wip-check.outputs.skip_review == 'false' && steps.auth-check.outputs.authorized == 'true'
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code Review
        if: steps.wip-check.outputs.skip_review == 'false' && steps.auth-check.outputs.authorized == 'true'
        id: claude-review
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # Use Claude Opus 4 for better code review quality
          model: claude-opus-4-20250514
          
          # Direct prompt for automated review (no @claude mention needed)
          direct_prompt: |
            Please review this pull request and provide structured feedback using collapsible HTML sections for better organization.
            
            Format your response using this template:
            
            ## PR Review Summary
            
            Brief 2-3 sentence overview of the PR and main findings.
            
            <details>
            <summary>üìã <b>Code Quality & Best Practices</b></summary>
            
            - Review code structure, naming conventions, and adherence to best practices
            - Check for code duplication and maintainability
            - Assess readability and documentation
            
            </details>
            
            <details>
            <summary>üêõ <b>Potential Bugs & Issues</b></summary>
            
            - Identify any logical errors or edge cases
            - Check for null/undefined handling
            - Review error handling and validation
            
            </details>
            
            <details>
            <summary>‚ö° <b>Performance Considerations</b></summary>
            
            - Analyze algorithmic complexity
            - Check for unnecessary operations or memory usage
            - Suggest optimizations where applicable
            
            </details>
            
            <details>
            <summary>üîí <b>Security Concerns</b></summary>
            
            - Review for potential security vulnerabilities
            - Check input validation and sanitization
            - Assess authentication/authorization if applicable
            
            </details>
            
            <details>
            <summary>üß™ <b>Test Coverage</b></summary>
            
            - Evaluate existing test coverage
            - Suggest additional test cases
            - Check for edge cases in tests
            
            </details>
            
            <details>
            <summary>üí° <b>Suggestions & Improvements</b></summary>
            
            - Provide constructive suggestions for improvement
            - Recommend alternative approaches if applicable
            - Highlight particularly good practices
            
            </details>
            
            Be constructive and helpful in your feedback. Use checkboxes (- [ ]) for actionable items.

          # Use sticky comments to update the same review on subsequent pushes
          use_sticky_comment: true
          
          # Optional: Customize review based on file types
          # direct_prompt: |
          #   Review this PR focusing on:
          #   - For TypeScript files: Type safety and proper interface usage
          #   - For API endpoints: Security, input validation, and error handling
          #   - For React components: Performance, accessibility, and best practices
          #   - For tests: Coverage, edge cases, and test quality
          
          # Optional: Different prompts for different authors
          # direct_prompt: |
          #   ${{ github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR' && 
          #   'Welcome! Please review this PR from a first-time contributor. Be encouraging and provide detailed explanations for any suggestions.' ||
          #   'Please provide a thorough code review focusing on our coding standards and best practices.' }}
          
          # Optional: Add specific tools for running tests or linting
          # allowed_tools: "Bash(npm run test),Bash(npm run lint),Bash(npm run typecheck)"
          
          # Optional: Skip review for certain conditions
          # if: |
          #   !contains(github.event.pull_request.title, '[skip-review]') &&
          #   !contains(github.event.pull_request.title, '[WIP]')

