name: Build and Publish Python wheels to PyPI and TestPyPI

# Prevent concurrent builds on the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    paths: # Push events containing matching files
      - "src/suews/**"
      - "src/supy/**"
      - "src/supy_driver/**"
      - ".github/workflows/build-publish_to_pypi.yml"
      - "test/**"
      - "pyproject.toml"
      - "meson.build"

  pull_request:
    paths: # PR events containing matching files
      - "src/suews/**"
      - "src/supy/**"
      - "src/supy_driver/**"
      - ".github/workflows/build-publish_to_pypi.yml"
      - "test/**"
      - "pyproject.toml"
      - "meson.build"
jobs:
  build_wheels:
    name: Build wheel for ${{ matrix.python }}-${{ matrix.buildplat[1] }} ${{ matrix.buildplat[2] }}
    runs-on: ${{ matrix.buildplat[0] }}
    permissions:
      contents: read
      issues: write  # Required for creating issues for Claude Code
    strategy:
      matrix:
        buildplat:
            - [ubuntu-latest, manylinux, x86_64]
            - [macos-13, macosx, x86_64]
            - [macos-latest, macosx, arm64]
            - [windows-latest, win, AMD64]

        python: ["cp39", "cp310", "cp311", "cp312", "cp313"]
        # exclude:
        # - buildplat: [macos-latest, macosx, arm64]
        #   python: ["cp38", "cp39"]

      fail-fast: false
    env:
      IS_32_BIT: ${{ matrix.buildplat[2] == 'x86' }}
      WHEEL_NAME: ${{ matrix.python }}-${{ matrix.buildplat[1] }}-${{ matrix.buildplat[2] }}
      CIBW_BUILD: ${{ matrix.python }}-${{ matrix.buildplat[1] }}*
      CIBW_ARCHS: ${{ matrix.buildplat[2] }}
      CIBW_ENVIRONMENT_PASS_LINUX: RUNNER_OS
      CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_28
      CIBW_MANYLINUX_AARCH64_IMAGE: manylinux_2_28
      CIBW_BEFORE_ALL_MACOS: >
        brew install gfortran &&
        brew unlink gfortran &&
        brew link gfortran
      CIBW_BEFORE_ALL_WINDOWS: >
        C:\msys64\usr\bin\bash.exe -lc "pacman -Syu --noconfirm" &&
        C:\msys64\usr\bin\bash.exe -lc "pacman -S --needed --noconfirm mingw-w64-ucrt-x86_64-gcc mingw-w64-ucrt-x86_64-gcc-fortran mingw-w64-ucrt-x86_64-binutils mingw-w64-ucrt-x86_64-make mingw-w64-ucrt-x86_64-openblas"
      CIBW_ENVIRONMENT_WINDOWS: >
        PATH="C:\\msys64\\ucrt64\\bin;$PATH"
        CC=gcc
        CXX=g++
        FC=gfortran
        CFLAGS="-D__USE_MINGW_ANSI_STDIO=1 -mlong-double-64"
        CXXFLAGS="-D__USE_MINGW_ANSI_STDIO=1 -mlong-double-64"
        FCFLAGS="-fno-optimize-sibling-calls"
        LDFLAGS="-lucrt -static-libgcc -static-libgfortran -LC:/msys64/ucrt64/lib -lsetjmp_compat"
      CIBW_BEFORE_BUILD_WINDOWS: >
        echo Creating setjmp compatibility library... &&
        echo int _setjmpex(void* buf) { extern int __intrinsic_setjmpex(void*); return __intrinsic_setjmpex(buf); } > setjmp_compat.c &&
        C:\msys64\ucrt64\bin\gcc.exe -c setjmp_compat.c -o setjmp_compat.o &&
        C:\msys64\ucrt64\bin\ar.exe rcs libsetjmp_compat.a setjmp_compat.o &&
        echo Library created, checking contents: &&
        C:\msys64\ucrt64\bin\nm.exe libsetjmp_compat.a &&
        echo Copying to standard locations: &&
        copy libsetjmp_compat.a C:\msys64\ucrt64\lib\ &&
        copy libsetjmp_compat.a C:\msys64\ucrt64\x86_64-w64-mingw32\lib\ &&
        echo Verifying library locations: &&
        dir C:\msys64\ucrt64\lib\libsetjmp_compat.a &&
        dir C:\msys64\ucrt64\x86_64-w64-mingw32\lib\libsetjmp_compat.a &&
        where python &&
        where gcc &&
        gcc --version &&
        pip install delvewheel
      CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: "delvewheel repair -w {dest_dir} {wheel}"
      CIBW_TEST_REQUIRES: pytest
      CIBW_TEST_COMMAND_MACOS: "python -m pytest '{project}/test'"
      CIBW_TEST_COMMAND_LINUX: "python -m pytest '{project}/test'"
      CIBW_TEST_COMMAND_WINDOWS: "python -m pytest {project}\\test"
      # CIBW_TEST_SKIP: "cp310-macosx_arm64" # skip test on arm64 on python 3.10 - cannot pass the water balance test for unknown reason even though it should be the same as x86_64
      MACOSX_DEPLOYMENT_TARGET: ${{ matrix.buildplat[0] == 'macos-13' && '13.0' || '14.0' }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
            python-version: 3.12

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.22.0

      - name: Create issue for Claude Code to fix build failure
        if: failure()
        id: create-issue
        uses: actions/github-script@v7
        with:
          script: |
            const title = `Build failure: ${{ matrix.python }}-${{ matrix.buildplat[1] }}-${{ matrix.buildplat[2] }}`;
            const body = `ðŸš¨ **Automated Build Failure Detection**

            **Build Details:**
            - Platform: ${{ matrix.buildplat[0] }}
            - Python: ${{ matrix.python }}
            - Architecture: ${{ matrix.buildplat[2] }}
            - Workflow: ${{ github.workflow }}
            - Run ID: ${{ github.run_id }}

            **Failure Information:**
            - Branch: ${{ github.ref_name }}
            - Commit: ${{ github.sha }}
            - Actor: ${{ github.actor }}

            @claude please analyze this build failure and provide a fix. The build failed during the wheel building process.

            **Build logs are available in the GitHub Actions run:** https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

            **Instructions for Claude:**
            1. Analyze the build failure logs
            2. Identify the root cause
            3. Provide a fix with specific code changes
            4. If this is a transient issue, suggest retry strategies
            5. If unable to fix automatically, document the issue for manual intervention

            **Auto-generated by Build & Publish workflow failure**`;

            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['build-failure', 'automated', 'claude-fix']
            });
            
            console.log(`Created issue #${issue.data.number} for Claude Code to fix build failure`);
            core.setOutput('issue_number', issue.data.number);

      - name: Wait for Claude Code intervention
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = '${{ steps.create-issue.outputs.issue_number }}';
            console.log(`Waiting for Claude Code to respond to issue #${issueNumber}...`);
            
            // Wait up to 10 minutes for Claude to respond
            const maxWaitTime = 10 * 60 * 1000; // 10 minutes
            const checkInterval = 30 * 1000; // 30 seconds
            const startTime = Date.now();
            
            while (Date.now() - startTime < maxWaitTime) {
              const comments = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber
              });
              
              // Check if Claude has responded
              const claudeResponse = comments.data.find(comment => 
                comment.user.login === 'github-actions[bot]' && 
                comment.body.includes('Claude Code') ||
                comment.body.includes('claude-code-action')
              );
              
              if (claudeResponse) {
                console.log('Claude Code has responded to the issue');
                return;
              }
              
              console.log('Waiting for Claude Code response...');
              await new Promise(resolve => setTimeout(resolve, checkInterval));
            }
            
            console.log('Claude Code did not respond within time limit, proceeding to manual debugging');

      - name: Setup tmate session for manual debugging
        if: failure()
        uses: mxschmitt/action-tmate@v3
        timeout-minutes: 15

      - name: upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.WHEEL_NAME }}
          path: ./wheelhouse/*.whl

  deploy:
    name: Publish to (Test)PyPI
    # IMPORTANT: this permission is mandatory for trusted publishing
    runs-on: ubuntu-latest
    needs:
      - build_wheels
    # Only run deploy on pushes (not PRs) to avoid duplicate publishing
    if: github.event_name == 'push'
    permissions:
      id-token: write  # Required for trusted publishing to PyPI
      contents: read   # Required for checkout
      issues: write    # Required for creating issues for Claude Code

    steps:
      - name: Download all the built wheels
        uses: actions/download-artifact@v4
        with:
          path: dist/
          merge-multiple: true

      - name: Validate wheel contents
        run: |
          pip install twine
          twine check dist/*
          
      - name: Create issue for Claude Code to fix deployment failure
        if: failure()
        id: create-deploy-issue
        uses: actions/github-script@v7
        with:
          script: |
            const title = `Deployment failure: Wheel validation or publishing failed`;
            const body = `ðŸš¨ **Automated Deployment Failure Detection**

            **Deployment Details:**
            - Workflow: ${{ github.workflow }}
            - Run ID: ${{ github.run_id }}
            - Job: deploy

            **Failure Information:**
            - Branch: ${{ github.ref_name }}
            - Commit: ${{ github.sha }}
            - Actor: ${{ github.actor }}

            @claude please analyze this deployment failure and provide a fix. The failure occurred during wheel validation or publishing to PyPI/TestPyPI.

            **Deployment logs are available in the GitHub Actions run:** https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

            **Instructions for Claude:**
            1. Analyze the deployment failure logs
            2. Check wheel validation issues or publishing problems
            3. Provide a fix with specific code changes
            4. If this is a PyPI/TestPyPI service issue, suggest retry strategies
            5. If unable to fix automatically, document the issue for manual intervention

            **Auto-generated by Build & Publish workflow deployment failure**`;

            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['deployment-failure', 'automated', 'claude-fix']
            });
            
            console.log(`Created issue #${issue.data.number} for Claude Code to fix deployment failure`);
            core.setOutput('issue_number', issue.data.number);

      - name: Wait for Claude Code intervention
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = '${{ steps.create-deploy-issue.outputs.issue_number }}';
            console.log(`Waiting for Claude Code to respond to issue #${issueNumber}...`);
            
            // Wait up to 10 minutes for Claude to respond
            const maxWaitTime = 10 * 60 * 1000; // 10 minutes
            const checkInterval = 30 * 1000; // 30 seconds
            const startTime = Date.now();
            
            while (Date.now() - startTime < maxWaitTime) {
              const comments = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber
              });
              
              // Check if Claude has responded
              const claudeResponse = comments.data.find(comment => 
                comment.user.login === 'github-actions[bot]' && 
                comment.body.includes('Claude Code') ||
                comment.body.includes('claude-code-action')
              );
              
              if (claudeResponse) {
                console.log('Claude Code has responded to the issue');
                return;
              }
              
              console.log('Waiting for Claude Code response...');
              await new Promise(resolve => setTimeout(resolve, checkInterval));
            }
            
            console.log('Claude Code did not respond within time limit, proceeding to manual debugging');

      - name: Setup tmate session for manual debugging
        if: failure()
        uses: mxschmitt/action-tmate@v3
        timeout-minutes: 15

      - name: Publish distribution to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1.11
        with:
          packages-dir: dist/
          verbose: true
          skip-existing: true
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository-url: https://test.pypi.org/legacy/

      - name: Publish distribution to PyPI
        if: startsWith(github.ref, 'refs/tags/') && !contains(github.ref, 'dev')
        uses: pypa/gh-action-pypi-publish@release/v1.11
        with:
          packages-dir: dist/
          verbose: true
          skip-existing: true
          password: ${{ secrets.PYPI_API_TOKEN }}
