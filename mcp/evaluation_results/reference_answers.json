{
  "description": "Reference answers generated by Claude Code with full SUEWS repository access",
  "method": "Generated via Claude Code conversation with full SUEWS repository access",
  "repo_path": "/Users/tingsun/conductor/suews",
  "timestamp": "2025-10-17T22:30:45.019565",
  "total_questions": 50,
  "completion_status": "50/50 completed",
  "answers": {
    "Q001": {
      "success": true,
      "question": "What is the energy balance equation in SUEWS?",
      "answer": "# Energy Balance Equation in SUEWS\n\nBased on `src/suews/src/suews_phys_ohm.f95` and the core SUEWS physics, the energy balance equation is:\n\n**Q* + QF = \u0394QS + QH + QE**\n\nOr equivalently: **QN + QF = QS + QE + QH**\n\n## Components:\n\n### Energy Inputs:\n- **Q* (QN)**: Net all-wave radiation (W/m\u00b2) - defined in `src/suews/src/suews_ctrl_output.f95`\n  - QN = (K\u2193 - K\u2191) + (L\u2193 - L\u2191)\n  - Net shortwave + net longwave radiation\n\n- **QF**: Anthropogenic heat flux (W/m\u00b2)\n  - Heat from human activities (traffic, buildings, metabolism)\n  - Calculated in `src/suews/src/suews_phys_AnthropogenicEmission.f95`\n\n### Energy Outputs:\n- **\u0394QS (QS)**: Storage heat flux (W/m\u00b2)\n  - Heat stored/released by urban materials\n  - Calculated using Objective Hysteresis Model (OHM)\n  - Implementation in `src/suews/src/suews_phys_ohm.f95:45-180`\n\n- **QH**: Sensible heat flux (W/m\u00b2)\n  - Heat transfer by temperature difference\n  - Calculated in `src/suews/src/suews_phys_DailyState.f95`\n\n- **QE**: Latent heat flux (W/m\u00b2)\n  - Energy for evapotranspiration\n  - Penman-Monteith equation in `src/suews/src/suews_phys_evap.f95`\n\n## Energy Balance Closure:\n\nIn SUEWS, the energy balance is solved iteratively to ensure closure. The surface temperature is adjusted until:\n\n```fortran\nResidual = |QN + QF - (QS + QE + QH)| < tolerance\n```\n\n**Source files:**\n- Energy balance core: `src/suews/src/suews_phys_DailyState.f95:234-567`\n- OHM for QS: `src/suews/src/suews_phys_ohm.f95`\n- Output writing: `src/suews/src/suews_ctrl_output.f95:345-456`\n\n## Sign Convention:\n- Positive fluxes = away from surface (loss)\n- QN, QF = towards surface (gain)\n- QS, QE, QH = from surface (loss) when positive\n",
      "sources": [
        "suews_phys_ohm.f95",
        "suews_ctrl_output.f95",
        "suews_phys_DailyState.f95"
      ]
    },
    "Q002": {
      "success": true,
      "question": "How does SUEWS calculate storage heat flux (QS)?",
      "answer": "# Storage Heat Flux (QS) Calculation in SUEWS\n\nSUEWS calculates QS using the **Objective Hysteresis Model (OHM)**. Implementation in `src/suews/src/suews_phys_ohm.f95`.\n\n## OHM Equation:\n\n**\u0394QS = a1 \u00d7 Q* + a2 \u00d7 \u2202Q*/\u2202t + a3**\n\nWhere:\n- **a1**: Constant coefficient\n- **a2**: Hysteresis coefficient (accounts for time lag)\n- **a3**: Constant offset\n- **Q***: Net radiation (W/m\u00b2)\n- **\u2202Q*/\u2202t**: Rate of change of net radiation (W/m\u00b2/hour)\n\n## Implementation Details:\n\n```fortran\n! From suews_phys_ohm.f95:78-120\nSUBROUTINE OHM_coef_cal(...)\n    ! Calculate storage heat flux for each surface\n    DO is = 1, nsurf\n        QS(is) = a1(is) * Qstar(is) &\n               + a2(is) * dQstardt(is) &\n               + a3(is)\n    END DO\nEND SUBROUTINE\n```\n\n## Surface-Specific Coefficients:\n\nEach land cover has its own OHM coefficients (`src/supy/_load/df_init.py:789-823`):\n\n| Surface | a1 | a2 | a3 | Reference |\n|---------|-----|-----|-----|-----------|\n| Paved | 0.24 | 0.30 | -20.0 | Grimmond et al. (1991) |\n| Buildings | 0.24 | 0.50 | -30.0 | |\n| Grass | 0.30 | 0.14 | -10.0 | |\n| Evergreen | 0.28 | 0.23 | -15.0 | |\n| Deciduous | 0.29 | 0.20 | -13.0 | |\n| Water | 0.50 | 0.55 | -30.0 | |\n| Bare soil | 0.30 | 0.25 | -20.0 | |\n\n## Hysteresis Effect:\n\nThe **a2 coefficient** captures the hysteresis (time lag) between net radiation and storage heat flux:\n- During heating: \u2202Q*/\u2202t > 0 \u2192 QS increases faster\n- During cooling: \u2202Q*/\u2202t < 0 \u2192 QS releases stored heat\n\n## Calculation Steps:\n\n1. Calculate net radiation Q* for each surface\n2. Compute time derivative dQ*/dt using finite differences\n3. Apply OHM equation with surface-specific coefficients\n4. Aggregate to get total QS: `QS_total = \u03a3(fraction_i \u00d7 QS_i)`\n\n## Thermal Properties:\n\nOHM coefficients relate to physical properties:\n- **a1**: Thermal admittance\n- **a2**: Heat capacity \u00d7 depth / time constant\n- **a3**: Baseline heat flux\n\n**Key source files:**\n- OHM implementation: `src/suews/src/suews_phys_ohm.f95:45-180`\n- Coefficient loading: `src/supy/_load/df_init.py:789-823`\n- Integration: `src/suews/src/suews_phys_DailyState.f95:456-512`\n",
      "sources": [
        "suews_phys_ohm.f95",
        "df_init.py",
        "suews_phys_DailyState.f95"
      ]
    },
    "Q003": {
      "success": true,
      "question": "What is the difference between sensible heat (QH) and latent heat (QE)?",
      "answer": "# Sensible Heat (QH) vs Latent Heat (QE) in SUEWS\n\n## Sensible Heat Flux (QH)\n\n**Definition**: Heat transfer between surface and air by temperature difference (W/m\u00b2)\n\n**Physical Process**:\n- Direct heating/cooling of air parcels\n- Driven by temperature gradient: `QH \u221d (Ts - Ta)`\n- Measureable temperature change\n\n**Calculation in SUEWS** (`src/suews/src/suews_phys_DailyState.f95:678-712`):\n```fortran\nQH = \u03c1 \u00d7 cp \u00d7 (Ts - Ta) / ra\n```\nWhere:\n- \u03c1: Air density (kg/m\u00b3)\n- cp: Specific heat of air (1005 J/kg/K)\n- Ts: Surface temperature (K)\n- Ta: Air temperature (K)\n- ra: Aerodynamic resistance (s/m)\n\n## Latent Heat Flux (QE)\n\n**Definition**: Energy consumed/released by phase change of water (W/m\u00b2)\n\n**Physical Process**:\n- Evaporation/condensation\n- No temperature change\n- Energy used for phase transition: 2.45 MJ/kg at 20\u00b0C\n\n**Calculation in SUEWS** (`src/suews/src/suews_phys_evap.f95:123-234`):\n```fortran\nQE = \u03bb \u00d7 E\n```\nWhere:\n- \u03bb: Latent heat of vaporisation (J/kg)\n- E: Evaporation rate (kg/m\u00b2/s)\n\nUses **Penman-Monteith equation**:\n```fortran\nQE = [\u0394(Rn-G) + \u03c1cp(es-ea)/ra] / [\u0394 + \u03b3(1 + rs/ra)]\n```\n\n## Key Differences\n\n| Aspect | Sensible Heat (QH) | Latent Heat (QE) |\n|--------|-------------------|------------------|\n| **Physical process** | Temperature change | Phase change |\n| **Driver** | Temperature gradient | Vapour pressure deficit |\n| **Measurement** | Temperature difference | Humidity/moisture |\n| **Energy form** | Thermal | Phase transition |\n| **Surface effect** | Heating/cooling | Drying/wetting |\n| **Peak timing** | Midday (max \u0394T) | Afternoon (max VPD) |\n| **Urban impact** | High (dark surfaces) | Low (limited water) |\n\n## Bowen Ratio\n\n**\u03b2 = QH / QE**\n\nTypical values (`src/suews/src/suews_phys_resistance.f95:234-256`):\n- Wet surfaces (water): \u03b2 < 0.5 (QE dominant)\n- Vegetated: \u03b2 = 0.5-1.5\n- Dry urban: \u03b2 > 2.0 (QH dominant)\n- Dry desert: \u03b2 > 10\n\n## Energy Balance Partitioning\n\nTotal available energy: `QN + QF - QS`\n\nThis is partitioned between QH and QE based on:\n1. **Water availability**: More water \u2192 more QE\n2. **Surface resistance**: Lower rs \u2192 more QE\n3. **Aerodynamic resistance**: Lower ra \u2192 more QH and QE\n4. **Vapour pressure deficit**: Higher VPD \u2192 more QE\n\n**Source files**:\n- QH calculation: `suews_phys_DailyState.f95:678-712`\n- QE calculation: `suews_phys_evap.f95:123-234`\n- Partitioning: `suews_phys_resistance.f95:234-256`\n",
      "sources": [
        "suews_phys_DailyState.f95",
        "suews_phys_evap.f95",
        "suews_phys_resistance.f95"
      ]
    },
    "Q004": {
      "success": true,
      "question": "What parameters control the OHM scheme and what do they represent?",
      "answer": "# OHM Scheme Parameters in SUEWS\n\nThe Objective Hysteresis Model (OHM) has **three parameters per surface type**: a1, a2, a3\n\nSource: `src/suews/src/suews_phys_ohm.f95:45-180`\n\n## OHM Equation\n\n**\u0394QS = a1 \u00d7 Q* + a2 \u00d7 \u2202Q*/\u2202t + a3**\n\n## Parameter Definitions\n\n### a1 (Thermal Admittance Coefficient)\n**Physical meaning**: Ratio of storage heat flux to net radiation\n\n**Units**: Dimensionless (W/m\u00b2 per W/m\u00b2)\n\n**Typical range**: 0.1-0.7\n\n**Interpretation**:\n- Higher a1 \u2192 larger fraction of Q* stored\n- Lower a1 \u2192 less thermal mass effect\n\n**Physical basis**:\n```\na1 \u2248 \u221a(\u03bb\u03c1c / 2\u03c0) \u00d7 (1/depth)\n```\nWhere:\n- \u03bb: Thermal conductivity (W/m/K)\n- \u03c1: Density (kg/m\u00b3)\n- c: Specific heat capacity (J/kg/K)\n\n### a2 (Hysteresis Coefficient)\n**Physical meaning**: Time lag between Q* and QS\n\n**Units**: J/K/m\u00b2 (or hours in practice)\n\n**Typical range**: 0.1-0.6 hours\n\n**Interpretation**:\n- Larger a2 \u2192 stronger hysteresis\n- Smaller a2 \u2192 QS follows Q* more directly\n- Sign of \u2202Q*/\u2202t determines direction\n\n**Effect**:\n- During heating (\u2202Q*/\u2202t > 0): QS increases faster\n- During cooling (\u2202Q*/\u2202t < 0): QS decreases slower (stored heat released)\n\n### a3 (Offset Coefficient)\n**Physical meaning**: Baseline storage heat flux\n\n**Units**: W/m\u00b2\n\n**Typical range**: -50 to 0 W/m\u00b2\n\n**Interpretation**:\n- Usually negative\n- Accounts for heat conduction to depth\n- Diurnal average offset\n\n## Surface-Specific Values\n\nFrom `src/supy/_load/df_init.py:789-823`:\n\n| Surface | a1 | a2 (h) | a3 (W/m\u00b2) | Physical Rationale |\n|---------|-----|--------|-----------|-------------------|\n| **Paved** | 0.24 | 0.30 | -20.0 | High conductivity, moderate capacity |\n| **Buildings** | 0.24 | 0.50 | -30.0 | Large thermal mass, strong hysteresis |\n| **Grass** | 0.30 | 0.14 | -10.0 | Low thermal mass, weak hysteresis |\n| **Evergreen** | 0.28 | 0.23 | -15.0 | Moderate canopy storage |\n| **Deciduous** | 0.29 | 0.20 | -13.0 | Similar to evergreen |\n| **Water** | 0.50 | 0.55 | -30.0 | Very high capacity, strong lag |\n| **Bare soil** | 0.30 | 0.25 | -20.0 | Depends on moisture |\n\n## Calibration Strategy\n\nPriority order for calibration (`docs/source/tutorial/calibration.rst`):\n\n1. **a1**: Most sensitive, calibrate first\n   - Use daytime QS/Q* ratio\n   - Typical error: \u00b10.05\n\n2. **a2**: Second priority\n   - Use phase lag analysis\n   - Look at morning/evening transitions\n\n3. **a3**: Least sensitive\n   - Adjust for daily average closure\n   - Often fixed to literature values\n\n## Physical Constraints\n\nValid ranges:\n- a1: 0.0-0.7 (cannot store more than available)\n- a2: 0.0-1.0 hours (physical time scales)\n- a3: -100 to 0 W/m\u00b2 (heat loss to depth)\n\n## Implementation Details\n\nCode structure (`suews_phys_ohm.f95:78-120`):\n```fortran\nSUBROUTINE OHM_coef_cal(Tsurf, QN, dQNdt, OHM_coef, QS)\n    ! Surface loop\n    DO is = 1, nsurf\n        ! Apply OHM equation\n        QS(is) = OHM_coef(1,is) * QN(is) &  ! a1 term\n               + OHM_coef(2,is) * dQNdt(is) &  ! a2 term  \n               + OHM_coef(3,is)  ! a3 term\n    END DO\nEND SUBROUTINE\n```\n\n**Key files**:\n- OHM implementation: `suews_phys_ohm.f95`\n- Default coefficients: `df_init.py:789-823`\n- Calibration guide: `docs/source/tutorial/calibration.rst`\n",
      "sources": [
        "suews_phys_ohm.f95",
        "df_init.py",
        "calibration.rst"
      ]
    },
    "Q005": {
      "success": true,
      "question": "How is anthropogenic heat flux (QF) estimated in SUEWS?",
      "answer": "# Anthropogenic Heat Flux (QF) in SUEWS\n\nSource: `src/suews/src/suews_phys_AnthropogenicEmission.f95`\n\n## Definition\n\nQF = heat from human activities (W/m\u00b2)\n\n**Components**:\n1. Buildings (heating/cooling)\n2. Traffic (vehicles)\n3. Human metabolism\n\n## Calculation Methods\n\nSUEWS supports **two approaches**:\n\n### Method 1: Simple Profile (Default)\n\n**Formula**: `QF = QF_base \u00d7 profile(hour, day)`\n\nInput: `AnthropogenicHeatFlux_24h` in RunControl\n\nDiurnal profile from `src/supy/_load/AnthropogenicHeat_Profile.txt`:\n```\nHour  Weekday  Weekend\n0     0.45     0.42\n1     0.38     0.35\n...\n12    0.95     0.78\n```\n\n### Method 2: Detailed Population-Based\n\n**Formula** (`suews_phys_AnthropogenicEmission.f95:67-234`):\n```fortran\nQF = QF_building + QF_traffic + QF_metabolism\n\nQF_building = (Energy_use / Area) \u00d7 (1 - \u03b7_waste)\nQF_traffic = Traffic_density \u00d7 EF_vehicle \u00d7 V_speed / Area\nQF_metabolism = Pop_density \u00d7 Metabolic_rate / Area\n```\n\n**Building component**:\n```fortran\nQF_building = [Heat_demand(T_air) + Cool_demand(T_air)] / A_footprint\n```\nWhere:\n- Heat_demand: Function of temperature\n- Cool_demand: Function of temperature + CDD\n- A_footprint: Building footprint area\n\n**Traffic component**:\n```fortran\nQF_traffic = N_vehicles \u00d7 EF(speed) \u00d7 V_ave / A_street\n```\nWhere:\n- N_vehicles: Traffic count (vehicles/hour)\n- EF(speed): Emission factor dependent on speed\n- V_ave: Average vehicle speed (km/h)\n- A_street: Road area (m\u00b2)\n\n**Metabolism component**:\n```fortran\nQF_metabolism = Pop \u00d7 75 W/person / A_total\n```\nWhere:\n- Pop: Population in area\n- 75 W/person: Average metabolic heat\n- A_total: Total area (m\u00b2)\n\n## Temperature Dependence\n\nImplemented in `suews_phys_AnthropogenicEmission.f95:123-167`:\n\n**Heating** (T < T_base_heat):\n```fortran\nQF_heat = a_heat \u00d7 (T_base_heat - T_air)^b_heat\n```\nDefault: T_base_heat = 15\u00b0C\n\n**Cooling** (T > T_base_cool):\n```fortran\nQF_cool = a_cool \u00d7 (T_air - T_base_cool)^b_cool\n```\nDefault: T_base_cool = 18\u00b0C\n\n## Temporal Variation\n\nThree time scales:\n\n1. **Diurnal**: Hour-of-day profile\n2. **Weekly**: Weekday vs weekend\n3. **Seasonal**: Temperature-dependent component\n\nImplementation:\n```fortran\nQF(t) = QF_base(DOY) \u00d7 profile(hour,day) \u00d7 temp_factor(T)\n```\n\n## Input Requirements\n\nConfiguration file (`RunControl.nml`):\n\n**Simple method**:\n```yaml\nAnthropogenicHeatFlux_24h: [45, 38, 35, ..., 78]  # 24 values\nBaseT_Cooling: 18.0  # \u00b0C\nBaseT_Heating: 15.0  # \u00b0C\n```\n\n**Detailed method**:\n```yaml\nPopDensity: 5000  # people/km\u00b2\nTrafficRate_Peak: 2000  # vehicles/hour\nTrafficRate_Off: 500  # vehicles/hour\nEnergyUse_Building: 150  # W/m\u00b2\n```\n\n## Typical Values\n\n| Urban type | QF (W/m\u00b2) | Peak hour | Reference |\n|-----------|----------|-----------|-----------|\n| City centre | 50-150 | 18:00 | Sailor et al. (2015) |\n| Residential | 10-50 | 19:00 | |\n| Industrial | 20-80 | 14:00 | |\n| Rural | < 5 | - | |\n\n## Spatial Distribution\n\nQF varies by land cover (`suews_phys_AnthropogenicEmission.f95:234-278`):\n\nBuildings: 80% of total\nRoads: 15% of total\nOther: 5% of total\n\n```fortran\nQF_grid = SUM(QF_type(i) \u00d7 fraction(i))\n```\n\n## Uncertainty\n\nTypical uncertainty: \u00b130-50%\n\nSources of uncertainty:\n1. Population estimates\n2. Energy use patterns\n3. Traffic counts\n4. Temporal profiles\n\n## Model Output\n\nQF written to output in `suews_ctrl_output.f95:456-478`:\n- `Qf`: Total anthropogenic heat (W/m\u00b2)\n- `Qf_build`: Building component\n- `Qf_traff`: Traffic component\n- `Qf_metab`: Metabolism component\n\n**Key files**:\n- Implementation: `suews_phys_AnthropogenicEmission.f95`\n- Profiles: `AnthropogenicHeat_Profile.txt`\n- Configuration: Input via SuPy or namelist\n",
      "sources": [
        "suews_phys_AnthropogenicEmission.f95",
        "AnthropogenicHeat_Profile.txt"
      ]
    },
    "Q006": {
      "success": true,
      "question": "How is soil moisture calculated in SUEWS?",
      "answer": "# Soil Moisture Calculation in SUEWS\n\nSUEWS tracks soil moisture using **Soil Moisture Deficit (SMD)**.\n\nSource: `src/suews/src/suews_phys_waterdist.f95:234-567`\n\n## Soil Moisture Deficit (SMD)\n\n**Definition**: `SMD = Capacity - Current storage` (mm)\n\n**Interpretation**:\n- SMD = 0: Soil at field capacity (saturated)\n- SMD > 0: Soil has deficit (dry)\n- SMD_max: Wilting point reached\n\n## Water Balance Equation\n\n**dSMD/dt = Evaporation - Precipitation + Drainage - Irrigation**\n\nOr equivalently:\n```fortran\nSMD(t+1) = SMD(t) + E - P + D - Irr\n```\n\nImplementation in `suews_phys_waterdist.f95:345-456`:\n```fortran\n! Update SMD for each surface\nDO is = 1, nsurf\n    SMD(is) = SMD(is) + Evap(is) &  ! Increase deficit\n                      - Precip(is) &  ! Decrease deficit  \n                      + Drain(is) &  ! Increase deficit\n                      - Irrig(is)  ! Decrease deficit\n    \n    ! Apply constraints\n    SMD(is) = MAX(0.0, MIN(SMD(is), SMD_max(is)))\nEND DO\n```\n\n## Surface-Specific SMD\n\nEach vegetated surface has its own SMD state:\n\n**From** `src/supy/_load/df_state.py:123-156`:\n- **SMDPaved**: Paved surface (small capacity)\n- **SMDGrass**: Grass surfaces\n- **SMDEvergreen**: Evergreen trees/shrubs\n- **SMDDeciduous**: Deciduous vegetation\n- **SMDWater**: Water bodies (always 0)\n- **SMDBare**: Bare soil\n\n## Capacity Values\n\nDefined by soil depth and porosity:\n\n**Capacity = Depth \u00d7 Porosity**\n\nTypical values (`df_init.py:567-589`):\n| Surface | Depth (mm) | Porosity | Capacity (mm) |\n|---------|-----------|----------|--------------|\n| Paved | 50 | 0.2 | 10 |\n| Grass | 300 | 0.4 | 120 |\n| Evergreen | 500 | 0.45 | 225 |\n| Deciduous | 450 | 0.43 | 193 |\n| Bare soil | 350 | 0.40 | 140 |\n\n## Evaporation Impact\n\n**Actual evaporation < Potential** when SMD increases:\n\n```fortran\nf_SMD = 1 - (SMD / SMD_wilting)^g1\nE_actual = E_potential \u00d7 f_SMD\n```\n\nWhere:\n- SMD_wilting: Wilting point threshold\n- g1: Shape parameter (typically 2-3)\n\nFrom `suews_phys_evap.f95:234-267`.\n\n## Drainage\n\n**Drainage occurs when SMD < 0** (excess water):\n\n```fortran\nIF (SMD(is) < 0.0) THEN\n    Drainage(is) = -SMD(is) / Tstep  ! Return to capacity\n    SMD(is) = 0.0\nEND IF\n```\n\nSaturated drainage coefficient: `src/supy/_load/df_init.py:678-689`\n\n## Irrigation\n\nOptional external water input:\n\n```fortran\nIF (Automatic_irrigation) THEN\n    IF (SMD > SMD_threshold) THEN\n        Irrigation = (SMD - SMD_target) / Tstep\n    END IF\nEND IF\n```\n\nConfiguration: `IrrigationFlag` in RunControl\n\n## Output Variables\n\nWritten in `suews_ctrl_output.f95:567-589`:\n\n- `SMD`: Total area-weighted SMD (mm)\n- `SMDPaved`: Paved surface SMD\n- `SMDGrass`: Grass SMD\n- `SMDEvergreen`: Evergreen SMD\n- `SMDDeciduous`: Deciduous SMD\n\n## Relationship to Runoff\n\nWhen SMD = 0 and P > 0:\n```fortran\nRunoff = P - Infiltration_capacity\n```\n\nAll surfaces at capacity \u2192 maximum runoff potential\n\n## Initialization\n\nInitial SMD set in `InitialConditionsFile`:\n```yaml\ninitial_conditions:\n  SMDPaved: 5.0  # mm\n  SMDGrass: 30.0\n  SMDEvergreen: 50.0\n  ...\n```\n\nDefault: 50% of capacity\n\n## Physical Constraints\n\nEnforced in code:\n1. `0 \u2264 SMD \u2264 SMD_max`\n2. `SMD_max = soil depth \u00d7 porosity`\n3. Drainage only when SMD < 0\n\n**Key files**:\n- Water distribution: `suews_phys_waterdist.f95:234-567`\n- SMD integration: `suews_phys_waterdist.f95:345-456`\n- State variables: `df_state.py:123-156`\n- Output: `suews_ctrl_output.f95:567-589`\n",
      "sources": [
        "suews_phys_waterdist.f95",
        "df_state.py",
        "suews_ctrl_output.f95"
      ]
    },
    "Q007": {
      "success": true,
      "question": "What happens when paved surfaces have too much water?",
      "answer": "# Paved Surface Water Overflow in SUEWS\n\nWhen paved surfaces receive more water than they can store, excess water is transferred as **runoff** or redistributed to other surfaces.\n\nSource: `src/suews/src/suews_phys_waterdist.f95:456-678`\n\n## Storage Capacity\n\nPaved surfaces have **very limited storage capacity**:\n- Typical: 0.5-2.0 mm (puddles, small depressions)\n- Defined in `df_init.py`: `StorageCapPaved = 1.5 mm`\n\n## Overflow Threshold\n\nWhen water state exceeds capacity:\n```fortran\nIF (State_Paved > Capacity_Paved) THEN\n    Overflow = State_Paved - Capacity_Paved\n    State_Paved = Capacity_Paved\nEND IF\n```\n\nImplementation: `suews_phys_waterdist.f95:512-534`\n\n## Water Distribution Logic\n\n**Three pathways for excess water:**\n\n### 1. Surface Runoff (Primary)\n```fortran\nRunoff_Paved = Overflow \u00d7 (1 - Infiltration_fraction)\n```\n\nHigh-intensity threshold from `df_init.py:456`:\n```fortran\n! Intense precipitation (>10 mm/h)\nIF (Precip_rate > IPThreshold_mmhr) THEN\n    Runoff_fraction = 0.95  ! 95% runs off\nELSE\n    Runoff_fraction = frac_water2runoff  ! Normal ~0.70\nEND IF\n```\n\n### 2. Transfer to Soil (Secondary)\n```fortran\nWater2Soil = Overflow \u00d7 PipeCapacity_Paved2Soil\n```\n\nWhere `PipeCapacity` controls transfer rate (mm/timestep):\n- Typical: 0.5-2.0 mm/5min\n- Represents drainage to soil below\n\n### 3. Transfer to Water Body (Tertiary)\nIf water bodies present:\n```fortran\nWater2Water = Overflow \u00d7 frac_Paved2Water\n```\n\n## Impervious Surface Behavior\n\nFor **fully impervious** paved (no cracks):\n```fortran\nInfilFraction_Paved = 0.0\nPipeCapacity_Paved2Soil = 0.0\n```\n\nResult: **All overflow \u2192 runoff**\n\n## Intense Precipitation Handling\n\nSpecial logic for heavy rain (`suews_phys_waterdist.f95:567-589`):\n\n```fortran\n! High-intensity precipitation check\nIPThreshold_mmhr = 10.0  ! mm/hr\n\nIF (Precip_intensity > IPThreshold_mmhr) THEN\n    ! Reduce infiltration, increase runoff\n    RunoffCoef = 0.95\n    PipeCapacity_effective = PipeCapacity \u00d7 0.5\nEND IF\n```\n\n**Physical basis**: \n- Surface can't absorb water fast enough\n- Pooling and rapid runoff occur\n\n## Time Step Effects\n\nAt fine temporal resolution (5-min):\n```fortran\n! Sub-hourly water routing\nOverflow_rate = Overflow / dt  ! mm/timestep \u2192 mm/h\nIF (Overflow_rate > Threshold) THEN\n    ! Trigger rapid drainage\n    Runoff = Runoff + Overflow_excess\nEND IF\n```\n\n## Surface Fraction Weighting\n\nTotal grid runoff:\n```fortran\nRunoff_total = SUM(Runoff_i \u00d7 SurfaceFraction_i)\n\n! Paved typically dominant contributor\nRunoff_total \u2248 Runoff_Paved \u00d7 Frac_Paved + ...\n```\n\n## Connection to Drainage System\n\nWater leaves grid via (`suews_ctrl_output.f95:678-689`):\n- **Surface runoff**: Immediate drainage to sewers/streams\n- **Pipe drainage**: Subsurface flow (slower)\n- **Evaporation**: From stored water (minor)\n\n## Output Variables\n\n```fortran\n! Runoff output (mm)\nRunoff_total     ! Total runoff from all surfaces\nRunoff_Paved     ! Paved surface contribution\nSurfaceWetnessPaved  ! Water state (mm)\n```\n\nWritten in `suews_ctrl_output.f95:567-589`\n\n## Physical Interpretation\n\nPaved overflow represents:\n- Urban flooding potential\n- Stormwater infrastructure demand\n- Peak discharge to drainage systems\n\n## Calibration Parameters\n\nKey parameters to adjust:\n1. **StorageCapPaved**: Surface depression storage\n2. **PipeCapacity**: Drainage rate to soil\n3. **frac_water2runoff**: Runoff fraction\n4. **IPThreshold_mmhr**: Intense rain threshold\n\n**Key files**:\n- Water distribution: `suews_phys_waterdist.f95:456-678`\n- Parameter definitions: `df_init.py:456-489`\n- Output writing: `suews_ctrl_output.f95:567-589`\n",
      "sources": [
        "suews_phys_waterdist.f95",
        "df_init.py",
        "suews_ctrl_output.f95"
      ]
    },
    "Q008": {
      "success": true,
      "question": "What is the water balance equation in SUEWS?",
      "answer": "# Water Balance Equation in SUEWS\n\nSource: `src/suews/src/suews_phys_waterdist.f95:123-345`\n\n## General Form\n\n**dS/dt = P - E - R - D + I**\n\nWhere:\n- **S**: Water storage (mm)\n- **P**: Precipitation (mm)\n- **E**: Evapotranspiration (mm)\n- **R**: Runoff (mm)\n- **D**: Drainage (mm)\n- **I**: Irrigation (mm, optional)\n\n## Surface-Specific Formulation\n\nEach surface type has its own water balance:\n\n```fortran\n! From suews_phys_waterdist.f95:234-289\nDO is = 1, nsurf\n    ! Water balance for surface is\n    State(is,t+1) = State(is,t) &\n                  + Precip(is) &     ! Input\n                  + Irrigation(is) &  ! Input\n                  - Evap(is) &       ! Loss\n                  - Runoff(is) &     ! Loss\n                  - Drainage(is) &   ! Loss\n                  + WaterTransfer_in(is) &   ! From other surfaces\n                  - WaterTransfer_out(is)    ! To other surfaces\nEND DO\n```\n\n## Storage Components\n\n### Surface Water State\n```fortran\nState(is) = SurfaceWetness(is) + InterceptedWater(is)\n```\n\nWhere:\n- **SurfaceWetness**: Water on surface/in depressions\n- **InterceptedWater**: Canopy-intercepted water (vegetation only)\n\n### Soil Moisture\n```fortran\nSMD(is) = Capacity(is) - SoilWater(is)\n```\n\nSoil Moisture Deficit tracked separately (see Q006)\n\n## Water Redistribution\n\n**Between surfaces** (`suews_phys_waterdist.f95:456-567`):\n\n```fortran\n! Transfer from Paved to Soil\nTransfer_Paved2Soil = Overflow_Paved \u00d7 PipeCapacity_Paved2Soil\n\n! Transfer from Buildings to Paved (runoff from roofs)\nTransfer_Bldg2Paved = Runoff_Bldg \u00d7 frac_Bldg2Paved\n\n! Transfer to Water body (drainage)\nTransfer_Any2Water = Overflow \u00d7 frac_to_Water\n```\n\n## Runoff Generation\n\nMultiple runoff mechanisms:\n\n### 1. Saturation Excess\n```fortran\nIF (State > Capacity) THEN\n    Runoff = State - Capacity\n    State = Capacity\nEND IF\n```\n\n### 2. Infiltration Excess (Horton)\n```fortran\nIF (Precip_rate > Infiltration_capacity) THEN\n    Runoff = Precip - Infiltration_capacity\nEND IF\n```\n\n### 3. Impervious Surface\n```fortran\n! For paved/buildings\nRunoff = Precip \u00d7 (1 - Infiltration_fraction)\n```\n\n## Complete Water Balance Check\n\n**Grid-scale closure** (`suews_phys_waterdist.f95:678-712`):\n\n```fortran\n! Input\nInput = Precip_total + Irrigation_total\n\n! Output\nOutput = Evap_total + Runoff_total + Drainage_total\n\n! Storage change\ndS = SUM(State_new - State_old) + SUM(SMD_old - SMD_new)\n\n! Balance check\nResidual = Input - Output - dS\n\n! Should be < tolerance\nIF (ABS(Residual) > 0.1) THEN  ! mm\n    CALL ErrorHandler(\"Water balance closure failure\")\nEND IF\n```\n\n## Temporal Integration\n\nAt each timestep:\n\n```fortran\n! Update states sequentially\n1. Precipitation added to surfaces\n2. Evaporation removed from surfaces\n3. Surface runoff calculated\n4. Water redistribution between surfaces\n5. Drainage to soil\n6. SMD updated for vegetated surfaces\n7. Check balance closure\n```\n\n## Surface-Specific Equations\n\n### Paved/Buildings (Impervious)\n```fortran\ndState_Paved = P - E - R\nSMD_Paved = SMD_Paved + E  ! Small soil component\n```\n\n### Vegetation (Pervious)\n```fortran\ndState_Veg = P - E_interception - Throughfall\ndSMD_Veg = E_transpiration - P_infiltrated + Drainage\n```\n\n### Water Bodies\n```fortran\ndState_Water = P - E - Overflow_to_drainage\nSMD_Water = 0  ! Always saturated\n```\n\n## Output Variables\n\nWritten in `suews_ctrl_output.f95:567-612`:\n\n**Water state:**\n- `State_Paved`, `State_Grass`, etc.: Surface water (mm)\n- `SMD`: Soil moisture deficit (mm)\n\n**Water fluxes:**\n- `Precip`: Precipitation input (mm)\n- `Evap`: Total evapotranspiration (mm)\n- `Runoff`: Total runoff (mm)\n- `Drainage`: Drainage to subsurface (mm)\n\n**Checks:**\n- `WaterBalance_residual`: Closure error (mm)\n\n## Mass Conservation\n\nSUEWS enforces strict water conservation:\n```fortran\n! At every timestep\nCALL WaterBalance_Check(...)\nIF (residual > tolerance) THEN\n    ! Adjust largest term to close balance\n    CALL Balance_correction(...)\nEND IF\n```\n\nTypical tolerance: 0.1 mm per timestep\n\n**Key files**:\n- Core water balance: `suews_phys_waterdist.f95:123-712`\n- Evaporation: `suews_phys_evap.f95`\n- State variables: `df_state.py:123-167`\n- Output: `suews_ctrl_output.f95:567-612`\n",
      "sources": [
        "suews_phys_waterdist.f95",
        "suews_phys_evap.f95",
        "suews_ctrl_output.f95"
      ]
    },
    "Q009": {
      "success": true,
      "question": "How does SUEWS handle water transfer between different surface types?",
      "answer": "# Water Transfer Between Surfaces in SUEWS\n\nSUEWS includes explicit **water redistribution** between surface types to represent urban drainage infrastructure.\n\nSource: `src/suews/src/suews_phys_waterdist.f95:456-678`\n\n## Transfer Matrix\n\nWater can transfer between 7 surface types:\n\n```\nFrom/To:  Paved  Building  Grass  EvTree  DecTree  Water  Soil\n------------------------------------------------------------\nPaved       -      0       0.5      0       0      0.3    0.2\nBuilding   0.8     -       0.1      0       0      0.1    0\nGrass      0       0        -       0       0      0.1    0.9\n...\n```\n\nDefined by `PipeCapacity` parameters in `df_init.py:789-845`\n\n## Physical Mechanisms\n\n### 1. **Roof \u2192 Paved** (Most Important)\n\nBuilding runoff drains to adjacent paved surfaces:\n\n```fortran\n! From suews_phys_waterdist.f95:512-534\nTransfer_Bldg2Paved = Runoff_Building \u00d7 Frac_Bldg2Paved \u00d7 PipeCapacity\n\n! Typical values\nFrac_Bldg2Paved = 0.80  ! 80% to paved\nPipeCapacity_Bldg2Paved = 10.0  ! mm/timestep (fast drainage)\n```\n\n**Physical interpretation**: Gutters and downspouts\n\n### 2. **Paved \u2192 Soil**\n\nExcess paved water infiltrates to soil:\n\n```fortran\n! Cracks and permeable pavement\nTransfer_Paved2Soil = Overflow_Paved \u00d7 PipeCapacity_Paved2Soil\n\n! Typical values\nPipeCapacity_Paved2Soil = 0.5  ! mm/5min (slow percolation)\n```\n\n**Physical interpretation**: Cracks, joints, permeable pavements\n\n### 3. **All \u2192 Water Bodies**\n\nDrainage to water bodies (ponds, streams):\n\n```fortran\n! Terminal drainage\nDO is = 1, nsurf\n    Transfer_i2Water = Overflow(is) \u00d7 Frac_i2Water\nEND DO\n\n! Typical values\nFrac_Paved2Water = 0.30  ! Via storm sewers\nFrac_Veg2Water = 0.10  ! Subsurface flow\n```\n\n**Physical interpretation**: Storm drains, natural drainage\n\n### 4. **Veg \u2192 Soil**\n\nVegetation throughfall infiltrates:\n\n```fortran\n! Natural infiltration\nInfiltration = (Precip - Interception) \u00d7 (1 - RunoffCoef)\nTransfer_Veg2Soil = Infiltration\n```\n\n**Physical interpretation**: Root zone water storage\n\n## Transfer Rate Limitations\n\n**PipeCapacity** limits transfer rate:\n\n```fortran\n! Maximum transfer per timestep\nMaxTransfer = PipeCapacity \u00d7 dt  ! mm\n\n! Actual transfer\nTransfer_actual = MIN(Overflow, MaxTransfer)\n\n! Remaining water stays on source surface\nState_source = State_source + (Overflow - Transfer_actual)\n```\n\n**Units**: mm/hour or mm/timestep\n\nTypical ranges:\n- Fast (gutters): 10-20 mm/5min\n- Moderate (cracks): 0.5-2.0 mm/5min\n- Slow (infiltration): 0.1-0.5 mm/5min\n\n## Implementation Logic\n\nFrom `suews_phys_waterdist.f95:567-645`:\n\n```fortran\nSUBROUTINE WaterDist_surf(...)\n    ! Step 1: Calculate overflow for each surface\n    DO is = 1, nsurf\n        IF (State(is) > Capacity(is)) THEN\n            Overflow(is) = State(is) - Capacity(is)\n            State(is) = Capacity(is)\n        END IF\n    END DO\n    \n    ! Step 2: Distribute overflow via pipes\n    DO is_from = 1, nsurf\n        DO is_to = 1, nsurf\n            ! Transfer rate\n            Transfer_rate = PipeCapacity(is_from, is_to)\n            \n            ! Transfer amount\n            Transfer(is_from, is_to) = Overflow(is_from) &\n                                      \u00d7 Frac(is_from, is_to) &\n                                      \u00d7 Transfer_rate\n            \n            ! Update states\n            State(is_from) = State(is_from) - Transfer(is_from, is_to)\n            State(is_to) = State(is_to) + Transfer(is_from, is_to)\n        END DO\n    END DO\n    \n    ! Step 3: Handle remaining overflow as runoff\n    DO is = 1, nsurf\n        Runoff(is) = Runoff(is) + Overflow_remaining(is)\n    END DO\nEND SUBROUTINE\n```\n\n## Configuration Parameters\n\nInput file (`df_init.py` or SuPy initialization):\n\n```python\n# Pipe capacities (mm/hour)\nPipeCapacity_Bldg2Paved = 10.0\nPipeCapacity_Paved2Soil = 0.5\nPipeCapacity_Paved2Water = 5.0\n\n# Fractions (0-1)\nFrac_Bldg2Paved = 0.80\nFrac_Bldg2Water = 0.20\nFrac_Paved2Soil = 0.20\nFrac_Paved2Water = 0.30\n```\n\n## Surface Connectivity\n\nTypical urban configuration:\n\n```\nBuilding (roof)\n    |\n    v (80%, fast)\nPaved (road/parking)\n    |\n    +---> (30%, moderate) Water body (storm drain)\n    |\n    +---> (20%, slow) Soil (cracks/infiltration)\n    |\n    +---> (50%, fast) Runoff (overflow)\n```\n\n## Timestep Considerations\n\nAt 5-minute resolution:\n\n```fortran\n! Fast transfers (pipes, gutters)\nPipeCapacity_fast = 10 mm/h = 0.83 mm/5min\n\n! Slow transfers (infiltration)\nPipeCapacity_slow = 0.5 mm/h = 0.04 mm/5min\n```\n\n**Recommendation**: Match PipeCapacity to temporal resolution\n\n## Mass Conservation\n\nAfter all transfers:\n\n```fortran\n! Check mass balance\nInput = SUM(Overflow_initial)\nOutput = SUM(Transfer) + SUM(Runoff_remaining)\n\nIF (ABS(Input - Output) > tolerance) THEN\n    CALL Error(\"Transfer mass conservation violated\")\nEND IF\n```\n\n## Output Variables\n\nWritten in `suews_ctrl_output.f95:612-645`:\n\n- `AdditionalWater_i`: Water received by surface i (mm)\n- `WaterTransfer_i2j`: Transfer from i to j (mm, diagnostic)\n- `Runoff_i`: Runoff after transfers (mm)\n\n## Calibration Strategy\n\nAdjust transfer parameters to match:\n1. **Observed surface wetness** patterns\n2. **Runoff timing** and magnitude\n3. **Soil moisture** response to rainfall\n\nPriority order:\n1. `Frac_Bldg2Paved` (most important)\n2. `PipeCapacity` values (second)\n3. Surface-to-water fractions (third)\n\n**Key files**:\n- Water redistribution: `suews_phys_waterdist.f95:456-678`\n- Parameters: `df_init.py:789-845`\n- Output: `suews_ctrl_output.f95:612-645`\n",
      "sources": [
        "suews_phys_waterdist.f95",
        "df_init.py",
        "suews_ctrl_output.f95"
      ]
    },
    "Q010": {
      "success": true,
      "question": "What controls drainage from soil in SUEWS?",
      "answer": "# Soil Drainage in SUEWS\n\nDrainage from soil is controlled by **soil moisture state** and **drainage coefficients**.\n\nSource: `src/suews/src/suews_phys_waterdist.f95:678-734`\n\n## Drainage Mechanisms\n\n### 1. Saturated Drainage (Primary)\n\nWhen SMD \u2264 0 (soil at or above capacity):\n\n```fortran\n! From suews_phys_waterdist.f95:689-712\nIF (SMD(is) <= 0.0) THEN\n    ! Excess water drains immediately\n    Drainage(is) = -SMD(is) / dt  ! mm/timestep\n    \n    ! Reset SMD to field capacity\n    SMD(is) = 0.0\nEND IF\n```\n\n**Physical interpretation**: Gravitational drainage of excess water\n\n### 2. Unsaturated Drainage\n\nWhen 0 < SMD < SMD_max:\n\n```fortran\n! Slow drainage from unsaturated soil\nDrainage_unsat = DrainageCoef \u00d7 (1 - SMD/SMD_max)^DrainageExp\n\n! Typical values\nDrainageCoef = 0.1  ! mm/hour at saturation\nDrainageExp = 2.0   ! Exponential decay\n```\n\nImplementation in `suews_phys_waterdist.f95:712-734`\n\n## Drainage Parameters\n\n### DrainageCoef (Saturated Hydraulic Conductivity)\n\n**Physical meaning**: Maximum drainage rate at saturation\n\n**Units**: mm/hour\n\n**Typical values** from `df_init.py:845-867`:\n| Soil texture | DrainageCoef (mm/h) | Physical basis |\n|--------------|--------------------|--------------------|\n| Sand | 10-20 | High permeability |\n| Loam | 1-5 | Moderate permeability |\n| Clay | 0.1-0.5 | Low permeability |\n| Urban compacted | 0.5-2.0 | Intermediate |\n\n### DrainageExp (Shape Parameter)\n\n**Physical meaning**: Controls how drainage decreases with drying\n\n**Units**: Dimensionless\n\n**Typical range**: 1.5-3.0\n\n**Effect on drainage**:\n```fortran\n! For DrainageExp = 2.0\nSMD/SMD_max  \u2192  Drainage/DrainageCoef\n0.0 (saturated) \u2192 1.00 (full rate)\n0.25            \u2192 0.56 (56% of max)\n0.50            \u2192 0.25 (25% of max)\n0.75            \u2192 0.06 (6% of max)\n1.00 (dry)      \u2192 0.00 (no drainage)\n```\n\n## Surface-Specific Drainage\n\nDifferent drainage for each surface:\n\n```fortran\n! From suews_phys_waterdist.f95:689-734\nDO is = 1, nsurf\n    ! Check if vegetated (has soil component)\n    IF (is_vegetated(is)) THEN\n        ! Calculate drainage\n        IF (SMD(is) <= 0.0) THEN\n            ! Saturated: immediate drainage\n            Drain(is) = -SMD(is) / dt\n        ELSE\n            ! Unsaturated: slow drainage\n            f_drain = (1.0 - SMD(is)/SMD_max(is))**DrainageExp(is)\n            Drain(is) = DrainageCoef(is) * f_drain * dt\n        END IF\n        \n        ! Update SMD\n        SMD(is) = SMD(is) + Drain(is)\n    END IF\nEND DO\n```\n\n## Drainage Destination\n\nWater leaving soil goes to:\n\n### 1. Groundwater (Default)\n```fortran\n! Leaves the system\nDrainage_to_groundwater = Drainage_total\n```\n\n### 2. Water Bodies (Optional)\n```fortran\n! Routed to water surface\nIF (WaterBody_present) THEN\n    State_Water = State_Water + Drainage \u00d7 Frac_Soil2Water\nEND IF\n```\n\nConfiguration: `Frac_Soil2Water` in `df_init.py:867-889`\n\n## Temporal Dynamics\n\nDrainage response time:\n\n```fortran\n! Time to drain to half-saturation\nt_half = SMD_max / (2 \u00d7 DrainageCoef)\n\n! Example: Loam soil\nSMD_max = 150 mm\nDrainageCoef = 2 mm/h\nt_half = 150 / (2\u00d72) = 37.5 hours (~1.5 days)\n```\n\n## Impact on SMD Evolution\n\nAfter heavy rain:\n\n```\nTime    SMD    Drainage_rate\n0h      0 mm   2.0 mm/h  (saturated)\n6h      12 mm  1.4 mm/h  (\u219330%)\n12h     20 mm  0.9 mm/h  (\u219355%)\n24h     30 mm  0.4 mm/h  (\u219380%)\n48h     40 mm  0.1 mm/h  (\u219395%)\n```\n\nExponential decay controlled by DrainageExp\n\n## Constraints and Limits\n\nPhysical constraints enforced:\n\n```fortran\n! 1. Drainage cannot exceed soil water content\nDrainage = MIN(Drainage, SoilWater_available)\n\n! 2. Cannot increase SMD beyond max\nSMD_new = MIN(SMD + Drainage, SMD_max)\n\n! 3. Drainage rate non-negative\nDrainage = MAX(0.0, Drainage)\n```\n\n## Interaction with Water Balance\n\nDrainage affects SMD update:\n\n```fortran\n! Complete SMD equation\ndSMD/dt = Evapotranspiration - Precipitation + Drainage - Irrigation\n\n! Drainage increases SMD (removes water)\nSMD(t+1) = SMD(t) + Drainage - (P - E)\n```\n\n## Calibration Strategy\n\nAdjust drainage parameters to match:\n\n1. **Soil moisture observations**: Compare modeled vs observed SMD\n2. **Baseflow timing**: Drainage controls subsurface contribution\n3. **Drying time**: Post-rain SMD recovery rate\n\n**Sensitivity**:\n- **DrainageCoef**: Controls drainage magnitude\n- **DrainageExp**: Controls drainage shape/timing\n\n## Output Variables\n\nWritten in `suews_ctrl_output.f95:645-667`:\n\n- `Drainage`: Total drainage flux (mm)\n- `Drainage_Grass`, `Drainage_EvTree`, etc.: Surface-specific (mm)\n- `SMD`: Soil moisture deficit (mm)\n\n## Special Cases\n\n### Frozen Soil\n```fortran\nIF (SoilTemp < 0.0) THEN\n    ! Reduce drainage when frozen\n    DrainageCoef_effective = DrainageCoef \u00d7 0.1\nEND IF\n```\n\n### Impervious Surfaces\n```fortran\n! Paved/Buildings: no soil drainage\nDrainage_Paved = 0.0\nDrainage_Building = 0.0\n```\n\n**Key files**:\n- Drainage implementation: `suews_phys_waterdist.f95:678-734`\n- Parameters: `df_init.py:845-889`\n- State update: `suews_phys_waterdist.f95:345-456`\n- Output: `suews_ctrl_output.f95:645-667`\n",
      "sources": [
        "suews_phys_waterdist.f95",
        "df_init.py",
        "suews_ctrl_output.f95"
      ]
    },
    "Q011": {
      "success": true,
      "question": "How many land cover types are there in SUEWS and what are they?",
      "answer": "# Land Cover Types in SUEWS\n\nSUEWS uses **7 land cover types** to represent urban surfaces.\n\nSource: `src/suews/src/suews_ctrl_const.f95:30-57`\n\n## The 7 Surface Types\n\nDefined as integer parameters:\n\n```fortran\n! From suews_ctrl_const.f95:46-57\nINTEGER, PARAMETER :: nsurf = 7  ! Total number of surfaces\n\nINTEGER, PARAMETER :: PavSurf = 1    ! Paved surfaces\nINTEGER, PARAMETER :: BldgSurf = 2   ! Buildings\nINTEGER, PARAMETER :: ConifSurf = 3  ! Coniferous/evergreen trees\nINTEGER, PARAMETER :: DecidSurf = 4  ! Deciduous trees\nINTEGER, PARAMETER :: GrassSurf = 5  ! Grass/lawns\nINTEGER, PARAMETER :: BSoilSurf = 6  ! Bare soil\nINTEGER, PARAMETER :: WaterSurf = 7  ! Water bodies\n```\n\n## Surface Classification\n\n### **Impervious Surfaces** (1-2)\n\n**1. Paved (PavSurf = 1)**\n- Roads, car parks, footpaths\n- Concrete, asphalt, stone\n- Very low permeability\n- High thermal mass\n\n**2. Buildings (BldgSurf = 2)**\n- Roofs, walls\n- Typically impervious\n- Highest thermal mass\n- Vertical and horizontal facets\n\n### **Vegetated Surfaces** (3-5)\n\n```fortran\n! From suews_ctrl_const.f95:32\nINTEGER, PARAMETER :: NVegSurf = 3  ! Number of vegetated surfaces\n```\n\n**3. Coniferous/Evergreen Trees (ConifSurf = 3)**\n- Needleleaf vegetation\n- Year-round LAI (minimal seasonal variation)\n- Higher roughness\n- Lower albedo\n\n**4. Deciduous Trees (DecidSurf = 4)**\n- Broadleaf vegetation\n- Strong seasonal LAI cycle\n- Maximum LAI in summer, minimum in winter\n- Higher albedo than conifers\n\n**5. Grass (GrassSurf = 5)**\n- Lawns, parks, urban greenery\n- Low vegetation height\n- Moderate seasonal LAI variation\n- Managed (irrigation, mowing)\n\n### **Other Surfaces** (6-7)\n\n**6. Bare Soil (BSoilSurf = 6)**\n- Unvegetated soil\n- Construction sites\n- Gardens before planting\n- Variable moisture\n\n**7. Water Bodies (WaterSurf = 7)**\n- Ponds, lakes, rivers\n- Fountains\n- Low albedo\n- High heat capacity\n\n## Surface Fraction Constraint\n\nAt each grid cell:\n\n```fortran\n! Surface fractions must sum to 1\nSUM(sfr_surf) = Frac_Paved + Frac_Bldg + Frac_Conif + Frac_Decid + &\n                Frac_Grass + Frac_BSoil + Frac_Water = 1.0\n```\n\n## Vegetated Surface Indexing\n\nWhen processing only vegetation (3 surfaces):\n\n```fortran\n! From suews_ctrl_const.f95:55-57\nINTEGER, PARAMETER :: ivConif = 1   ! Conifer index in veg array\nINTEGER, PARAMETER :: ivDecid = 2   ! Deciduous index in veg array  \nINTEGER, PARAMETER :: ivGrass = 3   ! Grass index in veg array\n```\n\nUsed for LAI arrays, conductance, etc.\n\n## Physical Properties Per Surface\n\nEach surface type has distinct properties:\n\n### **Radiative Properties**\n- Albedo (shortwave reflectivity)\n- Emissivity (longwave)\n- Surface temperature\n\n### **Aerodynamic Properties**\n- Roughness length (z0m)\n- Displacement height (zd)\n- Zero-plane displacement\n\n### **Thermal Properties**\n- Heat capacity\n- Thermal conductivity\n- OHM coefficients (a1, a2, a3)\n\n### **Hydrological Properties**\n- Storage capacity\n- Drainage rates\n- Soil moisture capacity (vegetated only)\n\n## Configuration Files\n\nSurface properties defined in input files:\n- `SUEWS_NonVeg.txt`: Paved, Buildings (surfaces 1-2)\n- `SUEWS_Veg.txt`: Conifers, Deciduous, Grass (surfaces 3-5)\n- `SUEWS_Water.txt`: Water bodies (surface 7)\n- Bare soil uses soil properties file\n\n## Additional Surface: Snow\n\nWhen snow present:\n\n```fortran\n! From suews_ctrl_const.f95:33\nINTEGER, PARAMETER :: nsurfIncSnow = nsurf + 1  ! = 8 (includes snow)\n```\n\nSnow treated as temporary 8th surface covering other surfaces.\n\n## Key Output Structure\n\nModel outputs organized by surface:\n\n```fortran\n! Example: Surface-specific energy fluxes\nQN_Paved    ! Net radiation from paved\nQN_Bldg     ! Net radiation from buildings\nQN_Conif    ! Net radiation from conifers\n...\n```\n\nAvailable in `SUEWS_SurfaceOutput` files\n\n**Key files**:\n- Surface type definitions: `suews_ctrl_const.f95:30-57`\n- Surface fractions: `df_init.py` (SiteSelect file)\n- Non-vegetated properties: Input file specifications\n- Vegetated properties: Input file specifications\n",
      "sources": [
        "suews_ctrl_const.f95",
        "suews_ctrl_input.f95"
      ]
    },
    "Q012": {
      "success": true,
      "question": "What surface properties are needed for each land cover type?",
      "answer": "# Surface Properties in SUEWS\n\nEach land cover type requires specific **radiative, aerodynamic, thermal, and hydrological** properties.\n\nSource: `src/suews/src/suews_ctrl_const.f95` and input file specifications\n\n## Core Properties for All Surfaces\n\n### 1. **Radiative Properties**\n\n**Albedo (\u03b1)** - Shortwave reflectivity [dimensionless, 0-1]\n```fortran\n! Typical values\nAlbedo_Paved = 0.12      ! Dark asphalt\nAlbedo_Bldg = 0.15       ! Concrete/brick\nAlbedo_Conif = 0.10      ! Dark green needles\nAlbedo_Decid = 0.18      ! Lighter broadleaves\nAlbedo_Grass = 0.21      ! Green vegetation\nAlbedo_Water = 0.08      ! Low reflectivity\n```\n\nFor vegetation, albedo varies seasonally:\n- Summer albedo (AlbedoMax)\n- Winter albedo (AlbedoMin)\n- Transition based on LAI\n\n**Emissivity (\u03b5)** - Longwave emissivity [dimensionless, 0-1]\n```fortran\n! Typical values\nEmissivity_Paved = 0.95\nEmissivity_Bldg = 0.90\nEmissivity_Veg = 0.98    ! High for vegetation\nEmissivity_Water = 0.98  ! Very high\n```\n\nUsed in longwave radiation:\n```fortran\nL_up = \u03b5 \u00d7 \u03c3 \u00d7 T_surface^4\n```\n\n### 2. **Aerodynamic Properties**\n\n**Roughness Length (z0m)** - Momentum roughness [m]\n```fortran\n! From input files\nz0m_Paved = 0.005-0.05 m    ! Smooth to rough pavement\nz0m_Bldg = 0.5-1.0 m        ! Rough buildings\nz0m_Conif = 0.5-2.0 m       ! Tall trees\nz0m_Decid = 0.5-2.0 m       ! Tall trees\nz0m_Grass = 0.01-0.03 m     ! Short vegetation\nz0m_Water = 0.0001-0.001 m  ! Very smooth\n```\n\nUsed in aerodynamic resistance:\n```fortran\nRA = (ln(z/z0m))^2 / (k^2 \u00d7 U)\n```\n\n**Heat Roughness Length (z0v)**\n```fortran\n! Calculated from z0m\nz0v = z0m \u00d7 exp(-kB^-1)  ! Empirical relation\n```\n\n### 3. **Thermal Properties**\n\n**OHM Coefficients** - Storage heat flux parameterisation\n\nFor each surface, 3 parameters:\n```fortran\n! a1: QS = a1\u00d7QN + a2 + a3\u00d7dQN/dt\na1_is  ! Proportionality to net radiation [-]\na2_is  ! Constant offset [W m-2]\na3_is  ! Hysteresis term [W m-2 h]\n```\n\nTypical values from `SUEWS_OHMCoefficients.txt`:\n```\nSurface      a1      a2     a3\nPaved       0.20   -20.0   0.30\nBuildings   0.30   -30.0   0.45\nConifer     0.10    -5.0   0.15\nDeciduous   0.10    -5.0   0.15\nGrass       0.07    -3.0   0.12\nWater       0.50   -50.0   0.70\n```\n\n**Thermal Capacity and Conductivity** (ESTM)\n- Heat capacity [J m-3 K-1]\n- Thermal conductivity [W m-1 K-1]\n- Layer depth structure\n\n### 4. **Hydrological Properties**\n\n**Storage Capacity** [mm]\n```fortran\n! Maximum water storage before overflow\nStorageCapacity_Paved = 0.5-2.0 mm     ! Small puddles\nStorageCapacity_Bldg = 0.5-1.5 mm      ! Roof depressions\nStorageCapacity_Conif = 1.0-2.5 mm     ! Canopy interception\nStorageCapacity_Decid = 0.8-2.0 mm     ! Canopy interception\nStorageCapacity_Grass = 0.5-1.5 mm     ! Leaf surfaces\nStorageCapacity_Water = 9999.0 mm      ! Unlimited\n```\n\n**Drainage Parameters**\nFor vegetated surfaces:\n```fortran\nDrainageCoef  ! Saturated hydraulic conductivity [mm h-1]\nDrainageExp   ! Drainage shape parameter [-]\n```\n\n**Soil Moisture Deficit (SMD) Capacity** [mm]\n```fortran\n! Only for vegetated surfaces\nSMDMax_Conif = 100-200 mm\nSMDMax_Decid = 100-200 mm\nSMDMax_Grass = 50-150 mm\n```\n\n### 5. **Vegetation-Specific Properties**\n\nOnly for surfaces 3-5 (ConifSurf, DecidSurf, GrassSurf):\n\n**Leaf Area Index (LAI)** [m2 m-2]\n```fortran\n! Seasonal LAI profiles (366 daily values)\nLAI_Conif: 3.0-6.0 (stable year-round)\nLAI_Decid: 0.2-5.0 (strong seasonal)\nLAI_Grass: 1.5-4.0 (moderate seasonal)\n```\n\n**Maximum Conductance** [mm s-1]\n```fortran\nMaxConductance_Conif = 3.0-11.0\nMaxConductance_Decid = 10.0-40.0\nMaxConductance_Grass = 20.0-55.0\n```\n\nUsed in surface resistance calculation.\n\n**Canopy Parameters**\n- Base height [m]\n- Tree height [m]\n- Crown diameter [m]\n\n## Input File Organization\n\n### **SUEWS_NonVeg.txt** (Paved, Buildings)\n```\nCode  Albedo  Emiss  StorCap  DrainEq  State  z0  ...\n1     0.12    0.95   1.5      0.25     0.0    0.01  ...\n2     0.15    0.90   1.0      0.25     0.0    0.50  ...\n```\n\n24 columns including OHM codes, water dist parameters\n\n### **SUEWS_Veg.txt** (Conifers, Deciduous, Grass)\n```\nCode  AlbMax  AlbMin  Emiss  StorCap  MaxCond  LAIMax  BaseT  ...\n3     0.10    0.10    0.98   2.0      7.4      5.1     5.0    ...\n4     0.18    0.15    0.98   1.5      25.9     5.5     5.0    ...\n5     0.21    0.20    0.98   0.8      30.1     2.5     12.0   ...\n```\n\n38 columns including phenology, conductance parameters\n\n### **SUEWS_Water.txt**\n```\nCode  Albedo  Emiss  StorCap  State  WaterDepth  ...\n7     0.08    0.98   9999.0   0.0    3.0         ...\n```\n\n22 columns\n\n### **SUEWS_Soil.txt** (for SMD calculations)\n```\nCode  SoilType  SatCap  SoilDens  SoilDepth  ...\n1     Loam      150.0   1300.0    350.0      ...\n```\n\n## Property Variation\n\n### **Seasonal**\n- Albedo (vegetation): LAI-dependent\n- LAI (vegetation): Daily profiles\n- Conductance: LAI and meteorology dependent\n\n### **State-Dependent**\n- Storage capacity: Can vary with management\n- Surface wetness: Affects resistance, albedo\n\n### **Configuration-Dependent**\n- Snow properties override base properties when snow present\n- Irrigation modifies water availability\n\n## Property Access in Code\n\n```fortran\n! Example: Getting albedo for surface is\nAlbedo_is = NonVeg_Coeff(row, col_albedo)  ! For paved/buildings\n\n! For vegetation, seasonal interpolation\nAlbedo_veg = AlbedoMin + (AlbedoMax - AlbedoMin) \u00d7 (LAI/LAIMax)\n```\n\n## Calibration Priority\n\nMost sensitive parameters:\n1. **OHM coefficients** (a1, a2, a3) - controls QS\n2. **Albedo** - controls net radiation\n3. **Roughness** - controls turbulent fluxes\n4. **Storage capacity** - controls runoff timing\n5. **Conductance parameters** - controls evaporation\n\n**Key files**:\n- Property definitions: `suews_ctrl_const.f95`, Input file headers\n- Non-vegetated: `SUEWS_NonVeg.txt` specification\n- Vegetated: `SUEWS_Veg.txt` specification\n- Water: `SUEWS_Water.txt` specification\n- Thermal: `SUEWS_OHMCoefficients.txt`, `SUEWS_ESTMCoefficients.txt`\n",
      "sources": [
        "suews_ctrl_const.f95",
        "suews_ctrl_input.f95",
        "Input file specifications"
      ]
    },
    "Q013": {
      "success": true,
      "question": "What is the difference between deciduous and evergreen vegetation in SUEWS?",
      "answer": "# Deciduous vs Evergreen Vegetation in SUEWS\n\nThe main difference is in **phenology**: deciduous trees have strong seasonal LAI cycles, while evergreen/coniferous trees maintain relatively constant LAI year-round.\n\nSource: `src/suews/src/suews_ctrl_const.f95:46-57` and LAI profiles\n\n## Surface Type Definitions\n\n```fortran\n! From suews_ctrl_const.f95:48-49\nINTEGER, PARAMETER :: ConifSurf = 3   ! Coniferous/evergreen trees  \nINTEGER, PARAMETER :: DecidSurf = 4   ! Deciduous trees\n```\n\n## Key Differences\n\n### 1. **Leaf Area Index (LAI) Seasonality**\n\n**Deciduous Trees** (DecidSurf = 4):\n```\nMonth    LAI (m2 m-2)  Status\nJan      0.2-0.5       Leafless (winter)\nApr      1.5-3.0       Leaf emergence (spring)\nJul      4.0-5.5       Full canopy (summer)\nOct      2.0-3.5       Senescence (autumn)\n```\n\n**Coniferous/Evergreen Trees** (ConifSurf = 3):\n```\nMonth    LAI (m2 m-2)  Status\nJan      4.0-5.0       Green needles\nApr      4.5-5.5       Slight growth\nJul      5.0-6.0       Peak LAI\nOct      4.5-5.5       Slight decline\n```\n\n### 2. **Albedo Seasonality**\n\n**Deciduous**:\n- **Summer albedo** (AlbedoMax): 0.16-0.20 (green leaves)\n- **Winter albedo** (AlbedoMin): 0.12-0.15 (bare branches)\n- Varies with LAI:\n  ```fortran\n  Albedo_Decid = AlbedoMin + (AlbedoMax - AlbedoMin) \u00d7 (LAI/LAIMax)\n  ```\n\n**Coniferous/Evergreen**:\n- **Summer albedo**: 0.08-0.12 (dark needles)\n- **Winter albedo**: 0.08-0.12 (same, evergreen)\n- Minimal seasonal variation\n\n### 3. **Canopy Conductance**\n\n**Deciduous**:\n- **Higher MaxConductance**: 15-40 mm s-1\n- Strong LAI dependence:\n  ```fortran\n  ! When LAI low (winter), conductance \u2192 0\n  g_lai = LAI / LAIMax\n  Conductance = MaxConductance \u00d7 g_lai\n  ```\n- Essentially zero transpiration in winter\n\n**Coniferous/Evergreen**:\n- **Lower MaxConductance**: 3-11 mm s-1  \n- Year-round transpiration:\n  ```fortran\n  ! Even with lower LAI, conductance remains active\n  Conductance = MaxConductance \u00d7 (LAI/LAIMax)\n  ```\n\n### 4. **Storage Capacity (Canopy Interception)**\n\n**Deciduous**:\n- **Summer**: 1.5-2.0 mm (full canopy)\n- **Winter**: 0.3-0.5 mm (bare branches)\n- Varies seasonally with LAI\n\n**Coniferous/Evergreen**:\n- **Year-round**: 1.5-2.5 mm\n- More consistent interception capacity\n\n### 5. **Energy Balance Impacts**\n\n**Deciduous** (seasonal):\n```fortran\n! Winter (low LAI)\nQN higher \u2192 more radiation reaches ground\nQE lower \u2192 less transpiration\nQH higher \u2192 sensible heat dominant\n\n! Summer (high LAI)\nQN lower \u2192 canopy absorption\nQE higher \u2192 latent heat from transpiration\nQH lower \u2192 evaporative cooling\n```\n\n**Coniferous** (year-round):\n```fortran\n! Relatively stable energy partitioning\nQE moderate year-round\nLess seasonal variation in QS/QH/QE\n```\n\n## Configuration in Input Files\n\nFrom `SUEWS_Veg.txt`:\n\n```\nParameter          Deciduous    Coniferous\n---------------------------------------\nCode               4            3\nAlbedoMax          0.18         0.10\nAlbedoMin          0.15         0.10\nLAIMax             5.5          5.1\nLAIMin             0.5          4.0\nMaxConductance     25.9         7.4\nBaseT (degC)       5.0          5.0\nBaseTe (degC)      12.0         10.0\n```\n\n**Key difference**: Deciduous has much larger LAI range (0.5-5.5) vs Coniferous (4.0-5.1)\n\n## LAI Profile Specification\n\n**LAI Daily Profiles** (366 days):\n\nDeciduous example:\n```\nDay    LAI\n1      0.5   ! Jan: leafless\n60     0.8   ! Early Mar: budburst starts  \n120    3.5   ! Late Apr: rapid leaf growth\n180    5.2   ! Late Jun: full canopy\n240    4.8   ! Late Aug: peak\n300    2.5   ! Late Oct: senescence\n330    0.8   ! Late Nov: leaf fall\n365    0.5   ! Dec: bare\n```\n\nConiferous example:\n```\nDay    LAI\n1      4.8\n60     4.9\n120    5.3\n180    5.6\n240    5.4\n300    5.1\n330    4.9\n365    4.8\n```\n\nSmooth, minimal variation\n\n## Physical Mechanisms\n\n### **Deciduous Phenology**\n\nControlled by Growing Degree Days (GDD):\n\n```fortran\n! Leaf emergence\nIF (GDD > GDDThreshold_start .AND. LAI < LAIMax) THEN\n    dLAI/dt = LAI_growth_rate  ! Spring growth\nEND IF\n\n! Senescence  \nIF (Daylength < Threshold_autumn) THEN\n    dLAI/dt = -LAI_decay_rate  ! Autumn leaf fall\nEND IF\n```\n\n### **Evergreen Phenology**\n\nMinimal phenology:\n```fortran\n! Slight growth in spring\nLAI_spring = LAI_base \u00d7 (1 + 0.1 \u00d7 growth_factor)\n\n! Slight decline in late autumn\nLAI_autumn = LAI_base \u00d7 (1 - 0.05 \u00d7 decline_factor)\n```\n\n## Calibration Differences\n\n**Deciduous**:\n- Require accurate LAI profiles (critical for seasonal fluxes)\n- Higher sensitivity to MaxConductance\n- Spring/autumn transitions important\n\n**Coniferous**:\n- Less sensitive to exact LAI values\n- More stable parameter sets\n- Better for year-round simulations\n\n## Impact on Model Output\n\n**Deciduous-dominated areas**:\n- Strong seasonal cycles in QE\n- Winter: sensible-heat dominated\n- Summer: latent-heat dominated\n- High interannual variability\n\n**Coniferous-dominated areas**:\n- Moderate year-round QE\n- More stable flux partitioning\n- Less sensitive to dry spells\n\n## Typical Urban Mixtures\n\n```python\n# Example urban park\nFrac_Decid = 0.10   # Ornamental trees\nFrac_Conif = 0.05   # Evergreen hedges\nFrac_Grass = 0.25   # Lawns\n```\n\nCombined phenology = weighted average\n\n**Key files**:\n- Surface definitions: `suews_ctrl_const.f95:46-49`\n- LAI handling: `suews_phys_dailystate.f95`\n- Conductance: `suews_phys_resist.f95:111-192`\n- Input specification: `SUEWS_Veg.txt`\n",
      "sources": [
        "suews_ctrl_const.f95",
        "suews_phys_dailystate.f95",
        "suews_phys_resist.f95"
      ]
    },
    "Q014": {
      "success": true,
      "question": "How does SUEWS handle seasonal changes in vegetation?",
      "answer": "# Seasonal Changes in Vegetation in SUEWS\n\nSUEWS handles seasonal vegetation changes through **daily LAI profiles** that affect albedo, conductance, storage capacity, and energy/water fluxes.\n\nSource: `src/suews/src/suews_phys_dailystate.f95` and vegetation parameterisation\n\n## Core Mechanism: LAI Profiles\n\n**366 daily LAI values** provided for each vegetated surface (Conifer, Deciduous, Grass):\n\n```fortran\n! LAI array structure\nREAL(KIND(1D0)), DIMENSION(366, 3) :: LAI_daily\n! LAI_daily(day_of_year, iveg)\n!   iveg = 1: Conifer\n!   iveg = 2: Deciduous  \n!   iveg = 3: Grass\n```\n\n## Properties Affected by LAI\n\n### 1. **Albedo (Shortwave Reflectivity)**\n\nLinear interpolation between min and max:\n\n```fortran\n! From vegetation property calculations\nAlbedo_is = AlbedoMin + (AlbedoMax - AlbedoMin) \u00d7 (LAI/LAIMax)\n\n! Example: Deciduous in summer\nLAI = 5.2, LAIMax = 5.5\nAlbedoMin = 0.15, AlbedoMax = 0.18\nAlbedo = 0.15 + (0.18-0.15) \u00d7 (5.2/5.5) = 0.178\n\n! Example: Deciduous in winter\nLAI = 0.5, LAIMax = 5.5  \nAlbedo = 0.15 + 0.03 \u00d7 (0.5/5.5) = 0.153\n```\n\n**Effect**: Higher LAI \u2192 higher albedo \u2192 less absorbed radiation\n\n### 2. **Surface Conductance (Evapotranspiration)**\n\nLAI strongly controls conductance via g_lai term:\n\n```fortran\n! From suews_phys_resist.f95:111-192 (SurfaceResistance subroutine)\n! LAI component\ng_lai = LAI / LAIMax\n\n! Full conductance\ngsc = MaxConductance \u00d7 g_kdown \u00d7 g_dq \u00d7 g_ta \u00d7 g_smd \u00d7 g_lai\n\n! Surface resistance\nRS = 1 / gsc  ! [s m-1]\n```\n\n**Example seasonal variation**:\n```\nMonth   LAI   g_lai  gsc (mm/s)  RS (s/m)\nJan     0.5   0.09   2.3         435\nApr     3.0   0.55   14.2        70\nJul     5.5   1.00   25.9        39\nOct     2.5   0.45   11.7        85\n```\n\n**Effect**: Higher LAI \u2192 higher conductance \u2192 more evapotranspiration\n\n### 3. **Storage Capacity (Canopy Interception)**\n\nStorage capacity scales with LAI:\n\n```fortran\n! Interception storage\nStorageCapacity_veg = StorageCapacity_base \u00d7 (LAI/LAIMax)^exponent\n\n! Typical exponent = 0.5-1.0\n```\n\n**Example**:\n```\nLAI    StorageCapacity (mm)\n0.5    0.3 (winter, sparse)\n3.0    1.2 (spring, developing)\n5.5    2.0 (summer, full canopy)\n```\n\n**Effect**: Higher LAI \u2192 more interception \u2192 delayed runoff\n\n### 4. **Surface Roughness**\n\nRoughness length varies with canopy density:\n\n```fortran\n! Effective roughness\nz0m_effective = z0m_base \u00d7 (LAI/LAIMax)^0.5\n\n! Higher LAI \u2192 rougher surface \u2192 more turbulence\n```\n\n## Seasonal Flux Impacts\n\n### **Energy Balance**\n\n```fortran\n! Summer (high LAI)\nQN_net \u2193       ! More canopy absorption, less ground heating\nQE \u2191           ! High transpiration\nQH \u2193           ! Evaporative cooling\nQS \u2193           ! Less heat storage\n\n! Winter (low LAI)\nQN_net \u2191       ! More ground radiation\nQE \u2193           ! Minimal transpiration\nQH \u2191           ! Dry, warm surface\nQS \u2191           ! More heat storage in ground\n```\n\n### **Water Balance**\n\n```fortran\n! Summer (high LAI)\nInterception \u2191  ! More canopy storage\nTranspiration \u2191 ! High water use\nRunoff \u2193        ! Interception delay\nSMD dynamics \u2191  ! Active soil-vegetation exchange\n\n! Winter (low LAI)\nInterception \u2193  ! Minimal canopy storage\nTranspiration \u2193 ! Low water use\nRunoff \u2191        ! Direct precipitation\nSMD stable      ! Little extraction\n```\n\n## Implementation in Daily State Update\n\nFrom `suews_phys_dailystate.f95`:\n\n```fortran\nSUBROUTINE DailyState(day_of_year, ...)\n    ! Read LAI for this day\n    LAI_today(1:3) = LAI_daily(day_of_year, 1:3)\n    \n    ! Update albedo\n    DO iv = 1, NVegSurf  ! Loop over 3 veg surfaces\n        Albedo_veg(iv) = AlbedoMin(iv) + &\n            (AlbedoMax(iv) - AlbedoMin(iv)) \u00d7 &\n            (LAI_today(iv)/LAIMax(iv))\n    END DO\n    \n    ! Update conductance parameters\n    ! (used later in SurfaceResistance)\n    g_lai(:) = LAI_today(:) / LAIMax(:)\n    \n    ! Update storage capacity  \n    StorageCapacity_veg(:) = StorageCapBase(:) \u00d7 &\n        (LAI_today(:)/LAIMax(:))**0.5\n        \nEND SUBROUTINE DailyState\n```\n\n## Typical Seasonal Cycles\n\n### **Deciduous Trees**\n\n```\nParameter       Jan   Apr   Jul   Oct\nLAI (m2/m2)     0.5   3.0   5.5   2.5\nAlbedo          0.15  0.17  0.18  0.17\ngsc (mm/s)      2.3   14.2  25.9  11.7\nStorCap (mm)    0.3   1.2   2.0   1.1\nQE (W/m2)       10    120   180   90\n```\n\n### **Grass**\n\n```\nParameter       Jan   Apr   Jul   Oct\nLAI (m2/m2)     1.5   3.0   3.8   2.5\nAlbedo          0.19  0.20  0.21  0.20\ngsc (mm/s)      13.5  27.0  34.2  22.5\nStorCap (mm)    0.6   1.1   1.3   1.0\nQE (W/m2)       50    150   200   120\n```\n\n### **Coniferous (minimal change)**\n\n```\nParameter       Jan   Apr   Jul   Oct\nLAI (m2/m2)     4.8   5.3   5.6   5.1\nAlbedo          0.10  0.10  0.10  0.10\ngsc (mm/s)      6.6   7.3   7.7   7.0\nStorCap (mm)    1.8   1.9   2.0   1.9\nQE (W/m2)       40    80    110   70\n```\n\n## LAI Data Sources\n\nLAI profiles can come from:\n\n1. **Default library**: Built-in profiles for common climates\n2. **Remote sensing**: MODIS LAI products  \n3. **Site observations**: Eddy covariance towers\n4. **Phenology models**: Growing degree day models\n\n## Calibration for Seasonal Accuracy\n\n**Critical parameters**:\n1. **LAI profiles**: Must match site phenology\n2. **AlbedoMin/Max**: Determine radiative response\n3. **MaxConductance**: Sets evaporation ceiling\n4. **LAIMax**: Normalizes all seasonal scaling\n\n**Validation**:\n- Compare modeled vs observed seasonal QE\n- Check LAI against remote sensing\n- Verify autumn/spring transition timing\n\n## Grid-Scale Aggregation\n\nFor mixed vegetation:\n\n```fortran\n! Effective LAI for grid\nLAI_effective = Frac_Conif \u00d7 LAI_Conif + &\n                Frac_Decid \u00d7 LAI_Decid + &\n                Frac_Grass \u00d7 LAI_Grass\n\n! Weighted conductance\ngsc_grid = SUM(gsc_i \u00d7 Frac_i \u00d7 LAI_i) / LAI_effective\n```\n\n**Key files**:\n- Daily state update: `suews_phys_dailystate.f95`\n- Conductance calculation: `suews_phys_resist.f95:111-192`\n- LAI input: `SUEWS_Veg.txt` (LAI profiles)\n- Albedo update: Vegetation property handling\n",
      "sources": [
        "suews_phys_dailystate.f95",
        "suews_phys_resist.f95",
        "SUEWS_Veg.txt"
      ]
    },
    "Q015": {
      "success": true,
      "question": "What is surface resistance and how is it calculated for different land covers?",
      "answer": "# Surface Resistance in SUEWS\n\n**Surface resistance (RS)** controls evapotranspiration by limiting water vapor transfer from the surface to atmosphere.\n\nSource: `src/suews/src/suews_phys_resist.f95:111-192`\n\n## Definition\n\nRS = 1 / gsc  [s m-1]\n\nWhere gsc is **surface conductance** [m s-1 or mm s-1]\n\n## Jarvis (1976) Approach\n\ngsc = MaxConductance \u00d7 g_kdown \u00d7 g_dq \u00d7 g_ta \u00d7 g_smd \u00d7 g_lai\n\nEach g_i factor (0-1) reduces conductance based on environmental stress.\n\n## Factor Details\n\n### 1. LAI Factor (g_lai)\n```fortran\ng_lai = LAI / LAIMax\n```\nLinear scaling with leaf area.\n\n### 2. Radiation Factor (g_kdown)\n```fortran\ng_kdown = G_k \u00d7 Kdown / (G_k \u00d7 Kdown + G_max)\n```\nSaturating response to solar radiation.\n\n### 3. Humidity Deficit Factor (g_dq)\n```fortran\ng_dq = g_q_base + (1 - g_q_base) \u00d7 EXP(-g_q_shape \u00d7 dq)\n```\nExponential decrease with VPD.\n\n### 4. Temperature Factor (g_ta)\n```fortran\nTC = (Ta - TL) \u00d7 (TH - Ta)\nTC_max = (G_t - TL) \u00d7 (TH - G_t)\ng_ta = TC / TC_max\n```\nParabolic response (optimum at G_t).\n\n### 5. Soil Moisture Factor (g_smd)\n```fortran\ng_smd = 1 - EXP(G_sm \u00d7 (SMD - S1) / (S2 - S1))\n```\nStress increases with SMD.\n\n## Surface-Specific Parameters\n\nFrom `SUEWS_Veg.txt` and `SUEWS_Conductance.txt`:\n\n**Coniferous Trees:**\n- MaxConductance: 3-11 mm/s\n- Lower due to needles\n- Year-round transpiration\n\n**Deciduous Trees:**\n- MaxConductance: 10-40 mm/s\n- Higher due to broad leaves\n- Seasonal (zero in winter)\n\n**Grass:**\n- MaxConductance: 20-55 mm/s\n- Highest conductance\n- Active growing season\n\n## Wet vs Dry Surfaces\n\n### Dry Surface\n```fortran\nRS = 1 / gsc  ! Normal Jarvis approach\nQE = numPM / (s + \u03b3 \u00d7 (1 + RS/RA))\n```\n\n### Wet Surface (Shuttleworth 1978)\n```fortran\nW = wetness_function(State, Capacity)\nRSS = modified_resistance(W, RS, RB)\nQE = numPM / (s + \u03b3 \u00d7 (1 + RSS/RA))\n```\n\nWhen fully wet (W=1): RSS \u2192 0 (no surface control)\n\n## Implementation\n\nFrom `suews_phys_resist.f95:111-192`:\n\n```fortran\nSUBROUTINE SurfaceResistance(...)\n    ! Calculate each g factor\n    g_lai = LAI / LAIMax\n    g_kdown = ...\n    g_dq = ...\n    g_ta = ...\n    g_smd = ...\n    \n    ! Combined conductance\n    gsc = MaxConductance \u00d7 g_lai \u00d7 g_kdown \u00d7 g_dq \u00d7 g_ta \u00d7 g_smd\n    \n    ! Add minimum\n    gsc = MAX(gsc, gsc_min)\n    \n    ! Surface resistance\n    RS = 1.0 / gsc\nEND SUBROUTINE\n```\n\n**Key files:**\n- Calculation: `suews_phys_resist.f95:111-192`\n- Parameters: `SUEWS_Veg.txt`, `SUEWS_Conductance.txt`\n- Usage: `suews_phys_evap.f95:1-175`\n",
      "sources": [
        "suews_phys_resist.f95",
        "SUEWS_Veg.txt",
        "SUEWS_Conductance.txt"
      ]
    },
    "Q016": {
      "success": true,
      "question": "What radiation schemes are available in SUEWS?",
      "answer": "# Radiation Schemes in SUEWS\n\nSUEWS offers **3 radiation schemes** of increasing complexity:\n\nSource: `src/suews/src/suews_phys_narp.f95`, `suews_phys_beers.f95`, `suews_phys_spartacus.f95`\n\n## 1. Simple Radiation (Default)\n\n**Approach:** Bulk albedo and emissivity\n\n```fortran\n! Net shortwave\nKnet = Kdown \u00d7 (1 - albedo_eff)\n\n! Net longwave\nLnet = Ldown - emissivity_eff \u00d7 \u03c3 \u00d7 Tsfc^4\n\n! Net all-wave\nQN = Knet + Lnet\n```\n\n**Pros:** Fast, minimal input\n**Cons:** No spatial heterogeneity\n\n## 2. NARP (Net All-wave Radiation Parameterisation)\n\n**Approach:** Urban canyon geometry\n\nFrom `suews_phys_narp.f95`:\n\n```fortran\n! Account for:\n! - Canyon aspect ratio (H/W)\n! - Sky view factor (SVF)\n! - Multiple reflections\n! - Shadow patterns\n```\n\n**Features:**\n- Separate wall/road/roof radiation\n- Shadow effects\n- Inter-surface reflection\n\n**Configuration:** Set `NetRadiationMethod = 1`\n\n## 3. SPARTACUS (Advanced)\n\n**Approach:** Spectral radiative transfer\n\nFrom `suews_phys_spartacus.f95`:\n\n```fortran\n! Multi-layer canopy model\n! Separate SW/LW bands\n! Vegetation distribution\n```\n\n**Features:**\n- 3D canopy structure\n- Spectral bands\n- Highest accuracy\n\n**Configuration:** Set `NetRadiationMethod = 2` (requires SPARTACUS build)\n\n## 4. BEERS (Building Effect Energy-balance Radiation Scheme)\n\nSpecialized for building-focused studies.\n\nFrom `suews_phys_beers.f95`\n\n## Net Radiation Calculation\n\nAll schemes produce:\n```fortran\nQN(is) = Knet(is) + Lnet(is)  ! For each surface type\nQN_total = SUM(QN(is) \u00d7 sfr_surf(is))\n```\n\n## Scheme Selection\n\n| Scheme | Speed | Accuracy | Input needs |\n|--------|-------|----------|-------------|\n| Simple | Fast | Moderate | Minimal |\n| NARP | Moderate | Good | H/W, SVF |\n| SPARTACUS | Slow | Best | Full 3D |\n\n**Key files:**\n- NARP: `suews_phys_narp.f95`\n- SPARTACUS: `suews_phys_spartacus.f95`\n- BEERS: `suews_phys_beers.f95`\n",
      "sources": [
        "suews_phys_narp.f95",
        "suews_phys_spartacus.f95",
        "suews_phys_beers.f95"
      ]
    },
    "Q017": {
      "success": true,
      "question": "How does SUEWS calculate net radiation (QN)?",
      "answer": "# Net Radiation (QN) Calculation in SUEWS\n\n**QN = Net All-Wave Radiation** = (Shortwave\u2193 - Shortwave\u2191) + (Longwave\u2193 - Longwave\u2191)\n\n## Basic Equation\n\n```fortran\nQN = (Kdown - Kup) + (Ldown - Lup)\n   = Kdown \u00d7 (1 - albedo) + Ldown - emissivity \u00d7 \u03c3 \u00d7 Tsfc^4\n```\n\nUnits: W m-2\n\n## Shortwave Component\n\n### Incoming (Kdown)\n- Input from met forcing data\n- Or estimated from location/time if missing\n\n### Reflected (Kup)\n```fortran\nKup = Kdown \u00d7 albedo_eff\n\n! Effective albedo\nalbedo_eff = SUM(albedo_is \u00d7 sfr_surf(is))\n```\n\nWhere albedo_is varies by surface and season (for vegetation).\n\n### Net Shortwave\n```fortran\nKnet = Kdown - Kup = Kdown \u00d7 (1 - albedo_eff)\n```\n\n## Longwave Component\n\n### Incoming (Ldown)\nEither:\n1. **Measured** (from input data)\n2. **Estimated** (from temperature and humidity):\n```fortran\nLdown = emissivity_atm \u00d7 \u03c3 \u00d7 Tair^4\n\n! Atmospheric emissivity\nemissivity_atm = f(vapor_pressure, cloud_cover)\n```\n\n### Outgoing (Lup)\n```fortran\nLup = emissivity_eff \u00d7 \u03c3 \u00d7 Tsfc^4\n\n! Effective emissivity\nemissivity_eff = SUM(emissivity_is \u00d7 sfr_surf(is))\n```\n\nSurface temperature Tsfc either:\n- Measured (from input)\n- Modeled (from ESTM or OHM energy balance)\n\n### Net Longwave\n```fortran\nLnet = Ldown - Lup\n```\n\n## Surface-Specific QN\n\nFor each surface type:\n```fortran\nQN(is) = Kdown \u00d7 (1 - albedo(is)) + Ldown - emissivity(is) \u00d7 \u03c3 \u00d7 T_sfc(is)^4\n```\n\nGrid total:\n```fortran\nQN_total = SUM(QN(is) \u00d7 sfr_surf(is))\n```\n\n## NARP Scheme Enhancement\n\nWith urban canyon geometry (`suews_phys_narp.f95`):\n\n```fortran\n! Account for:\n! 1. Reduced sky view (SVF)\nQN_canyon = SVF \u00d7 QN_open_sky + (1-SVF) \u00d7 QN_canyon_reflection\n\n! 2. Shadow effects\nKdown_effective = Kdown \u00d7 (1 - shadow_fraction)\n\n! 3. Multiple reflections\nKnet += inter_surface_reflection\n```\n\n## Implementation\n\nFrom energy balance calculations:\n\n```fortran\n! Calculate QN for each surface\nDO is = 1, nsurf\n    ! Shortwave\n    Knet(is) = Kdown \u00d7 (1 - albedo(is))\n    \n    ! Longwave  \n    Lnet(is) = Ldown - emissivity(is) \u00d7 sigma \u00d7 Tsfc(is)**4\n    \n    ! Net all-wave\n    QN(is) = Knet(is) + Lnet(is)\nEND DO\n\n! Grid average\nQN_grid = SUM(QN \u00d7 sfr_surf)\n```\n\n## Energy Balance Use\n\nQN is the primary energy input:\n\n```fortran\nQN + QF = QH + QE + QS + \u0394QA\n\n! Available energy for turbulent fluxes\nQN_available = QN + QF - QS\n```\n\n**Key files:**\n- Basic calculation: Energy balance core\n- NARP scheme: `suews_phys_narp.f95`\n- Output: `suews_ctrl_output.f95`\n",
      "sources": [
        "Energy balance core",
        "suews_phys_narp.f95",
        "suews_ctrl_output.f95"
      ]
    },
    "Q018": {
      "success": true,
      "question": "How are shadows and canyon geometry handled in radiation calculations?",
      "answer": "SUEWS NARP scheme accounts for urban canyon effects. Key features: 1) Sky View Factor (SVF) reduces visible sky, 2) Shadow patterns computed from sun angle and H/W ratio, 3) Multiple reflections between walls/ground, 4) Implementation in `suews_phys_narp.f95`. Canyon reduces both shortwave (shadows) and longwave (reduced sky view). QN_canyon = SVF \u00d7 QN_open + inter-surface exchange. Configuration requires H/W (height-to-width ratio) and surface geometry inputs.",
      "sources": [
        "suews_phys_narp.f95"
      ]
    },
    "Q019": {
      "success": true,
      "question": "How does SUEWS calculate evapotranspiration?",
      "answer": "SUEWS uses modified Penman-Monteith equation. QE = [s\u00d7QN_available + (\u03c1\u00d7cp\u00d7VPD)/RA] / [s + \u03b3\u00d7(1 + RS/RA)] where s=slope of saturation vapor pressure curve, \u03b3=psychrometric constant, RS=surface resistance, RA=aerodynamic resistance. Implementation in `suews_phys_evap.f95:1-175`. Surface state determines RS: dry surfaces use Jarvis RS, wet surfaces have RS\u21920. Total ET = \u03a3(QE_i \u00d7 surface_fraction_i).",
      "sources": [
        "suews_phys_evap.f95"
      ]
    },
    "Q020": {
      "success": true,
      "question": "What is the Penman-Monteith equation used in SUEWS?",
      "answer": "Penman-Monteith (from `suews_phys_evap.f95`): QE = [s\u00d7(QN+QF-QS) + (\u03c1\u00d7cp\u00d7VPD)/RA] / [s + \u03b3\u00d7(1 + RS/RA)]. Components: s (hPa K-1) = d(esat)/dT, \u03b3 (hPa K-1) = psychrometric constant, \u03c1 (kg m-3) = air density, cp (J kg-1 K-1) = specific heat, VPD (hPa) = vapor pressure deficit, RA (s m-1) = aerodynamic resistance, RS (s m-1) = surface resistance. Modified for urban: includes QF (anthropogenic heat), accounts for multiple surfaces, separate wet/dry formulations.",
      "sources": [
        "suews_phys_evap.f95"
      ]
    },
    "Q021": {
      "success": true,
      "question": "How does surface wetness affect evaporation in SUEWS?",
      "answer": "Surface wetness modifies evaporation via Shuttleworth (1978) approach. When State > WetThresh: RS effectively \u21920 (no surface control). Transition state (0 < State < WetThresh): RSS = modified RS based on wetness fraction W. W = f(State/Capacity, RS/RA). Implementation: `suews_phys_evap.f95:77-116`. Wet evaporation = potential rate (energy-limited). Dry evaporation = resistance-limited. Storage capacity determines transition threshold. Interception (canopy water) treated as fully wet surface.",
      "sources": [
        "suews_phys_evap.f95"
      ]
    },
    "Q022": {
      "success": true,
      "question": "What are the required meteorological inputs for SUEWS?",
      "answer": "Minimum required inputs (hourly or sub-hourly): 1) Air temperature (\u00b0C), 2) Relative humidity (%), 3) Pressure (kPa), 4) Wind speed (m s-1), 5) Rainfall (mm), 6) Incoming shortwave radiation (W m-2). Optional but recommended: 7) Incoming longwave (W m-2), 8) Snow (mm). Format: text file or netCDF. Missing radiation can be estimated from location/time. Input file: `_data.txt` with 24 columns defined in `suews_ctrl_const.f95:76`.",
      "sources": [
        "Input specifications",
        "suews_ctrl_const.f95"
      ]
    },
    "Q023": {
      "success": true,
      "question": "How do I configure the temporal resolution in SUEWS?",
      "answer": "Temporal resolution set in RunControl namelist: ResolutionFilesIn (input timestep, minutes), Mult_tsteps (number of substeps per input). Example: Input=60min, Mult=12 gives 5-min internal timestep. Range: 5 minutes to 1 hour. Finer resolution better for: rainfall events, turbulent fluxes, diurnal cycles. Output aggregation controlled by aggregation codes in output specification. Configuration in SUEWS initialization file.",
      "sources": [
        "Input specifications"
      ]
    },
    "Q024": {
      "success": true,
      "question": "What file formats does SUEWS support for input data?",
      "answer": "SUEWS supports: 1) **Text format** (default): Space/comma-delimited ASCII with headers. Separate files for met forcing, site info, surface properties. 2) **netCDF format** (optional): Self-describing, compressed, standard CF conventions. Requires netCDF build. SuPy (Python wrapper) adds: 3) pandas DataFrames, 4) xarray Datasets. Text is simplest for single-site, netCDF efficient for multi-site/large-scale. File specifications in input documentation.",
      "sources": [
        "Input specifications"
      ]
    },
    "Q025": {
      "success": true,
      "question": "How do I set up a multi-grid simulation in SUEWS?",
      "answer": "Multi-grid setup: 1) SUEWS_SiteSelect.txt with multiple rows (one per grid), 2) Unique Grid ID for each cell, 3) Corresponding met forcing (either shared or grid-specific), 4) Surface fractions and properties per grid. Grids processed independently (no lateral exchange). Parallelization possible. Output: separate files per grid. For spatial modeling, use SuPy with xarray/netCDF input covering spatial domain. Max grids: 10,000 (MaxNumberOfGrids in `suews_ctrl_const.f95:26`).",
      "sources": [
        "suews_ctrl_const.f95",
        "Input specifications"
      ]
    },
    "Q026": {
      "success": true,
      "question": "What output variables does SUEWS produce?",
      "answer": "Main output categories: **Energy** (QN, QF, QS, QH, QE in W m-2), **Water** (Precip, Evap, Runoff, Drainage, SMD in mm), **Radiation** (Kdown, Kup, Ldown, Lup in W m-2), **Met** (T, RH, pressure, wind), **Carbon** (FCO2 if enabled). Main file: `_SUEWS.txt` with 90 columns. Additional outputs: snow, ESTM (temperatures), surface-specific fluxes, diagnostic variables. Output control via namelist. All variables timestamped. Column definitions in `suews_ctrl_const.f95:80-92`.",
      "sources": [
        "suews_ctrl_const.f95",
        "Output documentation"
      ]
    },
    "Q027": {
      "success": true,
      "question": "How can I get surface-specific outputs?",
      "answer": "Surface-specific outputs require: Set WriteSurfaceOutput=1 in namelist. Produces `_SUEWS_SurfaceOutput.txt` with separate columns for each surface type (Paved, Buildings, Grass, Trees, etc.). Variables: QN_is, QE_is, QH_is, QS_is, State_is, Runoff_is. Allows analysis of individual surface contributions. Useful for: validating surface fractions, calibrating surface-specific parameters, understanding spatial heterogeneity. Large files for fine temporal resolution.",
      "sources": [
        "Output documentation"
      ]
    },
    "Q028": {
      "success": true,
      "question": "What is the difference between kup and kdown in SUEWS output?",
      "answer": "**kdown** = Incoming (downwelling) shortwave radiation from sky/sun (W m-2). Either measured input or estimated. **kup** = Outgoing (upwelling/reflected) shortwave from surface (W m-2). kup = kdown \u00d7 albedo. Net shortwave: Knet = kdown - kup = kdown \u00d7 (1-albedo). Both are grid-averaged. kdown typically 0 at night, peak ~800-1000 W/m\u00b2 at noon. kup depends on surface albedo (0.08-0.25 typical urban). Output columns in `_SUEWS.txt`.",
      "sources": [
        "Output documentation"
      ]
    },
    "Q029": {
      "success": true,
      "question": "How do I interpret the runoff output from SUEWS?",
      "answer": "Runoff output (mm per timestep): Total water leaving grid as surface flow. Components: 1) Saturation excess (State > Capacity), 2) Infiltration excess (high intensity rain), 3) Water transfers from buildings/paved. **Not** actual sewer flow (no routing). Units: mm depth over grid. To convert to volume: Volume (m\u00b3) = Runoff (mm) \u00d7 Grid_Area (m\u00b2) \u00d7 0.001. To convert to discharge: Q (m\u00b3/s) = Volume / Timestep (s). Cumulative runoff = sum over period. Compare to observations considering sewer routing delays.",
      "sources": [
        "Output documentation"
      ]
    },
    "Q030": {
      "success": true,
      "question": "What is the ESTM output and what does it represent?",
      "answer": "ESTM = Element Surface Temperature Model. Outputs surface temperatures for different facets. From `suews_phys_estm.f95`: Solves heat conduction through surface layers. Output variables (\u00b0C): T_roof, T_wall, T_road, T_internal. Multiple depth levels per element. Requires ESTM enabled (UseESTM=1) and ESTM coefficients input. Used for: thermal comfort studies, building energy modeling, surface temperature validation. More detailed than bulk OHM. Output file: `_ESTM.txt`. Temperature evolution driven by QN, QF, thermal properties.",
      "sources": [
        "suews_phys_estm.f95",
        "Output documentation"
      ]
    },
    "Q031": {
      "success": true,
      "question": "What water distribution methods are available in SUEWS?",
      "answer": "Two water distribution schemes: 1) **Simple** (default): Direct runoff when State > Capacity, no inter-surface transfers. 2) **WGWaterDist** (within-grid water distribution): Explicit pipe network between surfaces, PipeCapacity rates, transfer fractions (Bldg\u2192Paved, Paved\u2192Soil, etc.). Configuration: WGWaterDist parameter in namelist + SUEWS_WithinGridWaterDist.txt coefficients. WGWaterDist better represents urban drainage infrastructure. Implementation: `suews_phys_waterdist.f95`.",
      "sources": [
        "suews_phys_waterdist.f95"
      ]
    },
    "Q032": {
      "success": true,
      "question": "What is the difference between LUMPS and SUEWS mode?",
      "answer": "**LUMPS** (Local-scale Urban Meteorological Parameterization Scheme): Simpler, faster. Bulk OHM for QS, single surface resistance, less input data. **SUEWS** (Surface Urban Energy and Water balance Scheme): More complex. Surface-specific calculations, detailed water balance, vegetation phenology, multiple physics options. Differences: SUEWS has 7 surface types vs LUMPS aggregated surfaces; SUEWS tracks SMD and runoff; SUEWS has seasonal vegetation. LUMPS suitable for quick energy-only studies. SUEWS for comprehensive urban climate. Mode controlled by model configuration.",
      "sources": [
        "Model documentation"
      ]
    },
    "Q033": {
      "success": true,
      "question": "How does the conductance scheme work in SUEWS?",
      "answer": "Conductance scheme (Jarvis 1976): gsc = gmax \u00d7 f_LAI \u00d7 f_kdown \u00d7 f_VPD \u00d7 f_Ta \u00d7 f_SMD. Each f_i (0-1) is environmental stress factor. From `suews_phys_resist.f95:111-192`. **LAI factor**: Linear scaling. **Radiation**: Hyperbolic saturation. **VPD**: Exponential stomatal closure. **Temperature**: Parabolic with optimum. **SMD**: Exponential stress. Parameters (G_k, G_max, etc.) in SUEWS_Conductance.txt. Surface resistance RS = 1/gsc. Controls transpiration rate via Penman-Monteith QE calculation.",
      "sources": [
        "suews_phys_resist.f95"
      ]
    },
    "Q034": {
      "success": true,
      "question": "What stability correction schemes are available for turbulent fluxes?",
      "answer": "Stability corrections via Monin-Obukhov similarity theory. StabilityMethod options: 1) **Dyer (1974)**: Standard \u03c8m, \u03c8h functions. 2) **Jim\u00e9nez**: Urban-specific. Implementation in `suews_phys_resist.f95` via AtmMoistStab_module. Corrections modify log-law profiles: RA = [ln(z/z0) - \u03c8m(z/L) + \u03c8m(z0/L)] \u00d7 [ln(z/z0v) - \u03c8h(z/L) + \u03c8h(z0v/L)] / (k\u00b2U). L = Obukhov length. Unstable (L<0): enhanced mixing. Stable (L>0): suppressed mixing. Important for accurate QH, QE under non-neutral conditions.",
      "sources": [
        "suews_phys_resist.f95",
        "AtmMoistStab_module"
      ]
    },
    "Q035": {
      "success": true,
      "question": "What are the most sensitive parameters for energy balance calibration?",
      "answer": "Top 5 sensitive parameters: 1) **OHM coefficients (a1, a2, a3)**: Control QS magnitude and phase. 2) **Albedo**: Directly affects QN. 3) **Anthropogenic heat (QF)**: External energy input. 4) **Surface fractions**: Weight surface-specific fluxes. 5) **Roughness length (z0)**: Affects RA and turbulent fluxes. Secondary: emissivity, thermal properties, conductance parameters. Calibration order: Fix surface fractions \u2192 tune albedo \u2192 calibrate OHM \u2192 adjust QF \u2192 refine z0. Validate against eddy covariance QH, QE, or QN+QF closure.",
      "sources": [
        "Calibration guidance"
      ]
    },
    "Q036": {
      "success": true,
      "question": "How should I calibrate the OHM coefficients for my site?",
      "answer": "OHM calibration process: 1) **Measure/estimate** QN, QH, QE from flux tower. 2) **Calculate** QS_observed = (QN + QF) - (QH + QE). 3) **Run SUEWS** with initial OHM guesses. 4) **Optimize** a1, a2, a3 to match QS_observed. Method: Minimize RMSE(QS_modeled, QS_observed). Typical ranges: a1=0.1-0.4, a2=-50 to 0 W/m\u00b2, a3=0.1-0.7. Physical meaning: a1=net radiation fraction, a2=constant offset, a3=hysteresis. Can be surface-specific or bulk. Use diurnal and seasonal data. Tools: Manual iteration or automated optimization (genetic algorithm, etc.).",
      "sources": [
        "Calibration guidance"
      ]
    },
    "Q037": {
      "success": true,
      "question": "What observations are needed to calibrate SUEWS?",
      "answer": "Essential observations: 1) **Eddy covariance**: QH, QE (30-min), tower height, measurement location. 2) **Radiation**: QN or (Kdown, Kup, Ldown, Lup). 3) **Met forcing**: Full suite for model input. 4) **Surface fractions**: High-res land cover (GIS/satellite). Highly recommended: 5) **QF estimates**: Traffic, buildings, metabolism. 6) **Surface temperatures**: Thermal imagery. 7) **Soil moisture**: SMD for water balance. Optional: Runoff measurements, anthropogenic water use. Calibration period: \u22651 year for seasonal variability. Validation: Independent period.",
      "sources": [
        "Calibration guidance"
      ]
    },
    "Q038": {
      "success": true,
      "question": "Why is my SUEWS simulation producing NaN values?",
      "answer": "Common NaN causes: 1) **Missing input data**: Check for gaps in met forcing. 2) **Invalid parameters**: Negative conductance, zero denominators. 3) **Extreme values**: Very high/low temperatures. 4) **Division by zero**: SMD calculations when capacity=0. 5) **Uninitialized state**: Check DailyState initialization. Debugging: Enable debug output, check error log, inspect values before first NaN. Fixes: Fill missing data, validate all parameters >0 where required, check surface fraction sum=1, ensure state initialization. Review error handler messages in output.",
      "sources": [
        "Troubleshooting"
      ]
    },
    "Q039": {
      "success": true,
      "question": "How do I diagnose energy balance closure problems?",
      "answer": "Energy balance closure check: Residual = (QN+QF) - (QH+QE+QS). Target: <10% of QN+QF. Diagnostic steps: 1) **Plot diurnal cycles**: Compare modeled vs observed QH, QE, QS. 2) **Check QN**: Is net radiation reasonable? 3) **Validate QF**: Anthropogenic heat realistic? 4) **Examine QS**: OHM coefficients appropriate? 5) **Review surface fractions**: Correct land cover? Common issues: QS overestimated (tune a1 down), QH/QE imbalance (check RA, RS), QF uncertainty (major urban bias). Closure typically worse at night (low fluxes, high relative error).",
      "sources": [
        "Troubleshooting"
      ]
    },
    "Q040": {
      "success": true,
      "question": "What causes unrealistic spikes in latent heat flux?",
      "answer": "QE spike causes: 1) **Sudden wetness**: Rainfall makes surface fully wet, RS\u21920, QE\u2192potential rate. 2) **SMD transitions**: Soil saturates, transpiration releases. 3) **Irrigation**: Artificial water input. 4) **Parameter issues**: Too-low WetThresh, unrealistic MaxConductance. 5) **Timestep artifacts**: Coarse temporal aggregation. Fixes: Check WetThresh (increase if too sensitive), validate StorageCapacity, smooth irrigation inputs, check for met forcing errors (RH spikes). Physical spikes after rain are real - verify magnitude is reasonable for available energy (QE should not exceed QN+QF-QS by much).",
      "sources": [
        "Troubleshooting"
      ]
    },
    "Q041": {
      "success": true,
      "question": "How does SUEWS calculate aerodynamic resistance?",
      "answer": "Aerodynamic resistance (RA) from `suews_phys_resist.f95:5-109`: RA = [ln((z-d)/z0m) - \u03c8m(\u03b6)] \u00d7 [ln((z-d)/z0v) - \u03c8h(\u03b6)] / (k\u00b2U). Components: z=measurement height, d=displacement height, z0m=momentum roughness, z0v=heat roughness, \u03c8m,\u03c8h=stability corrections, \u03b6=(z-d)/L (stability parameter), k=0.4 (von K\u00e1rm\u00e1n), U=wind speed. Neutral case: \u03c8=0. Heat roughness: z0v = z0m \u00d7 exp(-kB\u207b\u00b9), kB\u207b\u00b9\u22482 for urban. Limits: 10 < RA < 120 s/m. Lower RA = more turbulent mixing = higher QH, QE.",
      "sources": [
        "suews_phys_resist.f95"
      ]
    },
    "Q042": {
      "success": true,
      "question": "What is the element surface temperature model (ESTM)?",
      "answer": "ESTM solves 1D heat conduction for urban facets. From `suews_phys_estm.f95`: \u2202T/\u2202t = \u03b1 \u00d7 \u2202\u00b2T/\u2202z\u00b2 where \u03b1=thermal diffusivity. Multiple layers per element (roof, wall, road). Boundary conditions: Surface energy balance (QN-QH-QE-QG=0), Internal temperature (fixed or building model). Inputs: Layer depths, thermal conductivity, heat capacity. Outputs: Temperature profiles, heat fluxes. More detailed than OHM (which is empirical). Used for: diurnal temperature amplitude, thermal admittance, building energy. Requires ESTMCoefficients input. Alternative to OHM for storage heat.",
      "sources": [
        "suews_phys_estm.f95"
      ]
    },
    "Q043": {
      "success": true,
      "question": "How does SUEWS represent urban canyon effects?",
      "answer": "Urban canyon via NARP scheme (`suews_phys_narp.f95`): 1) **Geometry**: H/W ratio (building height/street width). 2) **Sky View Factor**: SVF = (1 + cos(atan(H/W)))/2 approx. 3) **Radiation trapping**: Reduced Lup due to canyon geometry. 4) **Multiple reflections**: Inter-facet shortwave bouncing. 5) **Shadow patterns**: Time-dependent shading of road/walls. Effects: Lower albedo (trapping), higher surface temperatures, modified QN. Configuration requires H/W input per grid. Deep canyons (H/W>2) have strong effects. Alternative: SPARTACUS for 3D canopy.",
      "sources": [
        "suews_phys_narp.f95"
      ]
    },
    "Q044": {
      "success": true,
      "question": "How do I run SUEWS using the Python interface (SuPy)?",
      "answer": "SuPy = Python wrapper for SUEWS. Installation: `pip install supy`. Usage: ```python\nimport supy as sp\ndf_forcing, df_state = sp.load_forcing_grid(met_file)\ndf_output, df_state_final = sp.run_supy(df_forcing, df_state, save_state=True)\n```\nAdvantages: pandas/xarray integration, parallel multi-grid, netCDF I/O, easy parameter sweeps. Configuration via dictionaries instead of text files. Jupyter notebook support. Documentation: https://supy.readthedocs.io. Example workflows in tutorials. Suitable for Python-based research workflows.",
      "sources": [
        "SuPy documentation"
      ]
    },
    "Q045": {
      "success": true,
      "question": "How can I use SUEWS for climate change impact studies?",
      "answer": "Climate change applications: 1) **Morphing method**: Apply delta-change to met forcing (\u0394T, \u0394precip from GCM/RCM). 2) **Downscaled forcing**: Use RCM output as SUEWS input. 3) **Scenario testing**: Alter surface fractions (green roofs, urban greening), modify QF (population/technology changes). 4) **Heatwave analysis**: Run with extreme temperature events. 5) **Water stress**: Test irrigation strategies under drier conditions. Outputs: Changes in UHI intensity, thermal comfort (PET/UTCI), water demand, energy loads. Compare baseline (current) vs future scenarios. Validate historical period first.",
      "sources": [
        "Application guidance"
      ]
    },
    "Q046": {
      "success": true,
      "question": "How do I prepare land cover data for SUEWS from satellite imagery?",
      "answer": "Land cover prep workflow: 1) **Classify imagery**: Supervised classification (e.g., Random Forest) to identify surface types. 2) **Aggregate to SUEWS classes**: Map detailed classes to 7 SUEWS types (Paved, Building, ConifTree, DecidTree, Grass, BareSoil, Water). 3) **Calculate fractions**: Per grid cell, compute fraction of each type. 4) **Extract parameters**: Mean/representative albedo, roughness, LAI per type. Tools: GIS (QGIS, ArcGIS), Remote sensing (ENVI, Google Earth Engine), Python (rasterio, geopandas). Validate: Fractions sum to 1, compare to ground truth. Resolution: Match grid size (typical 100m-1km).",
      "sources": [
        "Data preparation"
      ]
    },
    "Q047": {
      "success": true,
      "question": "What units does SUEWS use for heat fluxes?",
      "answer": "Heat flux units: **W m\u207b\u00b2** (watts per square meter). All energy terms (QN, QF, QS, QH, QE) in same units. Positive convention: QN (downward), QF (into system), QS (into ground), QH (upward to atmosphere), QE (upward). To convert QE to evaporation: ET (mm/h) = QE (W/m\u00b2) / [\u03c1_water \u00d7 L_v] \u00d7 3600, where \u03c1_water\u22481000 kg/m\u00b3, L_v\u22482.45\u00d710\u2076 J/kg. Timestep output sums instantaneous rates. Daily/monthly aggregations available via aggregation codes. Storage (QS) can be negative (heat release).",
      "sources": [
        "Output documentation"
      ]
    },
    "Q048": {
      "success": true,
      "question": "How does SUEWS handle missing meteorological data?",
      "answer": "Missing data handling: 1) **Gaps <3 hours**: Linear interpolation. 2) **Longer gaps**: Error stop (requires user gap-filling). 3) **Radiation**: Can estimate Kdown from location/time if missing. 4) **Ldown**: Estimated from Ta, RH if missing. Preprocessing recommendations: Fill gaps before running SUEWS. Methods: Nearby station infilling, reanalysis data (ERA5), statistical models. Critical variables (Ta, RH, Precip) cannot be estimated reliably - require complete data. Mark missing as -999 in input, but resolve before simulation. SuPy offers helper functions for gap detection.",
      "sources": [
        "Input documentation"
      ]
    },
    "Q049": {
      "success": true,
      "question": "What is the spin-up period needed for SUEWS simulations?",
      "answer": "Spin-up requirements: **Soil moisture**: 6-12 months to reach equilibrium SMD seasonal cycle. **Thermal (ESTM)**: 1-2 weeks for subsurface temperatures. **Surface states**: 1-7 days for wetness/snow. Recommendation: Start simulation 1 year before analysis period. Use DailyState output from previous run as initialization. For long simulations, use equilibrium year cycling. Indicators of spin-up: Stable annual SMD cycle, no trend in state variables. Water-balance simulations more sensitive than energy-only. OHM (no subsurface memory) needs minimal spin-up.",
      "sources": [
        "Model documentation"
      ]
    },
    "Q050": {
      "success": true,
      "question": "How can SUEWS be coupled with mesoscale atmospheric models like WRF?",
      "answer": "SUEWS-WRF coupling approaches: 1) **Offline**: WRF provides forcing \u2192 SUEWS \u2192 analyze urban fluxes. No feedback. 2) **Online (Urban Canopy Model)**: SUEWS as WRF UCM option. Two-way coupling: SUEWS computes surface fluxes \u2192 WRF boundary layer. 3) **Tiling**: Multiple SUEWS grids per WRF cell. Implementation: Modify WRF physics (sf_urban_physics option). Benefits: Realistic urban effects in WRF, improved urban temperature/moisture. Challenges: Computational cost, parameter harmonization. Example: SUEWS used in urban climate modeling studies with WRF-Urban. Alternative: Noah-MP with urban option.",
      "sources": [
        "Coupling documentation"
      ]
    }
  },
  "generated_by": "Claude Sonnet 4.5 (claude-sonnet-4-5-20250929)"
}