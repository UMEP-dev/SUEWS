# Ruff configuration for SUEWS project
# This file contains all ruff settings for both local development and GitHub Actions

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.9 (minimum supported version)
target-version = "py39"

# Exclude common directories
exclude = [
    ".git",
    ".ruff_cache",
    ".venv",
    "venv",
    "__pycache__",
    "build",
    "dist",
    "*.egg-info",
    "docs/_build",
    "worktrees",
    # Fortran wrapper generated files
    "src/supy/_suews_driver.py",
    "*_wrap.f90",
]

# Local development might want different cache location
cache-dir = "~/.cache/ruff"

# Show violations with code snippets
show-fixes = true

# Output format for local development
output-format = "concise"

# Enable preview features for latest improvements
preview = true

[lint]
# Enable multiple rule sets for comprehensive linting
select = [
    # Core rules
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # Pyflakes
    
    # Import conventions
    "I",      # isort
    
    # Code quality
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "SIM",    # flake8-simplify
    "UP",     # pyupgrade
    
    # Documentation
    "D",      # pydocstyle
    
    # NumPy-specific
    "NPY",    # NumPy-specific rules
    
    # Additional quality checks
    "RUF",    # Ruff-specific rules
    "PL",     # Pylint
]

# Ignore rules that conflict with project style or are too strict
ignore = [
    # Line length handled by formatter
    "E501",   # Line too long
    
    # Documentation (gradual adoption)
    "D100",   # Missing docstring in public module
    "D101",   # Missing docstring in public class
    "D102",   # Missing docstring in public method
    "D103",   # Missing docstring in public function
    "D104",   # Missing docstring in public package
    "D105",   # Missing docstring in magic method
    "D107",   # Missing docstring in __init__
    
    # NumPy style docstrings
    "D203",   # 1 blank line required before class docstring
    "D212",   # Multi-line docstring summary should start at the first line
    "D213",   # Multi-line docstring summary should start at the second line
    "D402",   # First line should not be the function's signature
    "D413",   # Missing blank line after last section
    "D415",   # First line should end with a period, question mark, or exclamation point
    "D416",   # Section name should end with a colon
    
    # Specific to scientific computing
    "NPY002", # Replace legacy np.random calls (gradual migration)
    "PLR0913", # Too many arguments (common in scientific functions)
    "PLR2004", # Magic value used in comparison (common in scientific code)
    
    # Allow certain patterns
    "B008",   # Do not perform function calls in argument defaults
    "B905",   # zip() without explicit strict= (Python 3.10+)
    "SIM108", # Use ternary operator (sometimes less readable)
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]

# Rules that should not be auto-fixed (require human review)
unfixable = [
    "B",      # Bugbear rules often need careful review
    "F841",   # Unused variables might be intentional
    "SIM",    # Simplifications might reduce clarity
]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[lint.per-file-ignores]
# Test files have different requirements
"test/**/*.py" = [
    "D",      # Don't require docstrings in tests
    "PLR2004", # Magic values are fine in tests
    "S101",   # Assert is fine in tests
]

# CLI and scripts can have different style
"src/supy/cmd/*.py" = [
    "PLR0913", # Many arguments are common in CLI
]

# Generated files
"src/supy/_version.py" = ["ALL"]

[lint.isort]
# Configure import sorting to match project style
known-first-party = ["supy"]
combine-as-imports = true
force-sort-within-sections = true

[lint.pydocstyle]
# Use NumPy-style docstrings
convention = "numpy"

[lint.pylint]
# Adjust complexity thresholds for scientific computing
max-args = 10  # Scientific functions often have many parameters
max-branches = 15  # Complex algorithms may have multiple branches

[format]
# Formatting rules (consistent with Black)
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# Enable docstring formatting
docstring-code-format = true
docstring-code-line-length = 72